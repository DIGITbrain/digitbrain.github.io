{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"DIGITbrain Project Documentation","text":""},{"location":"#about","title":"About","text":"<p>Compared to the digital twin concept, which is already increasingly used by manufacturing companies today, the DIGITbrain concept will go one step further by developing the 'Digital Product Brain' which will store data throughout the entire life cycle of a production line or a machine.</p> <p>By collecting all this data, it will be possible to customise and set-up machines / production assets for very specific manufacturing tasks whenever needed. This will enable a new manufacturing model, called Manufacturing-as-a-Service (MaaS), which will allow for on-demand production of much more specialised products, even in smaller quantities and still in an economically profitable way.</p> <p>For full project details visit digitbrain.eu.</p>"},{"location":"#using-this-documentation","title":"Using this documentation","text":"<p>The primary aim of this documentation is to serve as a point of reference for providers and consumers of the different assets in DIGITbrain. These include Microservices, Algorithms, Model and Data, as well as Behaviours and Processes.</p>"},{"location":"#assets","title":"Assets","text":"<p>Please navigate using the available navigation bars. Information on the fields available on each asset is available in detail or as an overview. </p> <p>If you're new to DIGITbrain, refer to Getting Started.</p>"},{"location":"#examples","title":"Examples","text":"<p>Several examples are already running on the DIGITbrain platform. A complete specification has been provided for each of these examples and it is hoped that these can serve as a guide for users looking to describe their own assets for use in the DIGITbrain platform.</p> <p>See these examples here. Note that some field names may appear differently.</p>"},{"location":"#technical-information","title":"Technical Information","text":"<p>Much of the information presented across this site is automatically updated based on the schemas defined in the Asset Metadata Registry, which stores information about the different assets that are created on the platform. It is up-to-date with the very latest production version.</p> <p>This documentation is served from  a GitHub repository.</p> <p>Learn about contributing to this documentation by reading our contributor's guide.</p> <p>If you experience any issues using this site, please let us know by creating an issue on GitHub.</p>"},{"location":"adv/","title":"Going Further With DIGITbrain","text":"<p>This section introduces the ways in which you can further customise assets to realise more complex applications with more advanced functionality. The topics below may not apply to every use case, so pick and choose based on your application requirements.</p> <ul> <li>Model &amp; Data Parameters</li> <li>Open Parameters</li> <li>Exposing a microservice</li> <li>Dynamic domain names</li> <li>TLS termination for HTTPS</li> <li>Bring-your-own (edge) devices</li> </ul>"},{"location":"adv/domains/","title":"Dynamic Domain Names","text":"<p>Cloud instances deployed as part of a DIGITbrain application can have FQDNs (fully qualified domain names) allocated to them at provision time. All FQDNs will be a subdomain of:</p> <p>cbp-routing.ch</p> <p>To take advantage of this feature, simply provide your desired subdomain as a string in the deployment metadata when describing your cloud instances. If you then, for example, expose a microservice externally on that instance on port 80, you can reach the service at:</p> <p>http://&lt;subdomain&gt;.cbp-routing.ch</p> <p>See the relevant field here.</p>"},{"location":"adv/edge/","title":"Edge Devices","text":"<p>Edges</p> <p>DIGITbrain applications can run on your own edge devices, and benefit from having compute power closer to the data.</p>"},{"location":"adv/edge/#requirements","title":"Requirements","text":"<p>For an edge device to be used as a hosting node for your application, components of DIGITbrain will need to access your device to install an run a small software component called (KubeEdge). As such, the device must meet the following requirements:</p> <ul> <li>Have an endpoint accessible from the DIGITbrain cloud</li> <li>Have an SSH server open on port 22</li> <li>Have an SSH user with sudo privileges</li> <li>Have a *NIX operating system</li> </ul> <p>For more specific information, such as the DIGITbrain cloud subnet, please contact your support person.</p>"},{"location":"adv/edge/#about-kubeedge","title":"About KubeEdge","text":"<p>KubeEdge is an open-source framework for enabling the scheduling of containerised workloads at the edge, with Kubernetes. The KubeEdge project is under the umbrella of the CNCF as an incubator project, and is so held to the highest standards and best practices in software development. It is well maintained by the open-source community.</p> <p>KubeEdge extends the cluster of cloud instances that make up the underlying infrastructure for a Process, by joining one or more edge devices to it. Once this cluster is extended, Algorithms can be bound to specific edge devices to bring compute closer to the data.</p>"},{"location":"adv/edge/#kubeedge-on-your-device","title":"KubeEdge on your Device","text":"<p>Joining an edge device to a Process's cluster can only occur once a Process is started. When a Process is started, one MiCADO cloud instance is dynamically provisoned to begin creating the cluster. This MiCADO instance will connect to any identified edge devices to join them to the cluster. The workflow steps are as follows:</p> <ul> <li>SSH to install KubeEdge at edge (if not already installed)</li> <li>SSH to execute KubeEdge join command</li> <li>pointing at endpoint of MiCADO</li> <li>with a token generated by MiCADO</li> </ul> <p>Because these steps require root access, we require an SSH user with <code>sudo</code> privileges. Once the above steps are complete, we no longer require port 22 to be open. Because joining the edge device requires dynamic parameters (endpoint of MiCADO and MiCADO-generated token), it is not practical to complete these steps manually.</p>"},{"location":"adv/edge/#metadata-description","title":"Metadata Description","text":"<p>The metadata specification for edges is here.</p>"},{"location":"adv/expose/","title":"Expose a Microservice","text":"<p>By default, Microservices are not exposed in, or out of the cluster where your application is running. You can expose a microservice internally, so other microservices may communicate with it. And you can expose a microservice externally, so that it can be accessed publicly.</p> <p>If you are familiar with Docker, this will be familiar. The <code>expose</code> property allows communication between containers, while the <code>ports</code> property exposes a service on the host.</p>"},{"location":"adv/expose/#internally","title":"Internally","text":"<p>When microservices should communicate internally, ensure their deploymentData correctly exposes them. Other Microservices running in the cluster can raech them using their host or service name. See examples below:</p> Docker-ComposeKubernetes <p>Use the <code>expose</code> property</p> <pre><code>version: '3.9'\nservices:\nmymicros:\nimage: digitbrain/codeigniter-php5\nexpose: 8080\n</code></pre> <p>Success</p> <p>This example exposes the service running on port 8080 inside this container.Other Microservices in the cluster can reach it at mymicros:8080</p> <p>In addition to your <code>Pod</code>, <code>Deployment</code> or other workload, include a <code>Service</code>.Use <code>---</code> to separate the definitions.</p> <pre><code>---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\nlabels:\napp: mymicros\nspec:\n&lt;truncated&gt;\n---\napiVersion: v1\nkind: Service\nmetadata:\nlabels:\napp: mymicros\nname: mymicros-svc\nspec:\nports:\n- name: http\nport: 8080\ntargetPort: 8080\nselector:\napp: mymicros    </code></pre> <p>Success</p> <p>This example exposes the service running on port 8080 inside this container.Other Microservices in the cluster can reach it at mymicros-svc:8080</p>"},{"location":"adv/expose/#externally","title":"Externally","text":"<p>When microservices should be available publicly, ensure their deploymentData correctly exposes them. You can access them via the IP of the node they are running on. See examples below:</p> <p>Warning</p> <p>Don't forget to add the <code>published</code> or <code>hostPort</code> to opened ports on the node where your Microservice will run!</p> Docker-ComposeDocker-Compose (long-syntax)Kubernetes <p>Use the <code>ports</code> property.</p> <pre><code>services:\nmymicros:\nimage: digitbrain/codeigniter-php5\nports:\n- \"80:8080\"\n</code></pre> <p>Success</p> <p>This example exposes a service running on port 8080 inside the container.It can be reached publicly at 192.168.10.20:80, where 192.168.10.20 is the public IP address of the node hosting the Microservice.</p> <p>Use the <code>ports</code> property with long-syntax and <code>host</code> if you need to specify the protocol.</p> <pre><code>services:\nmymicros:\nimage: digitbrain/codeigniter-php5\nports:\n- target: 8080\npublished: 80\nprotocol: tcp\nmode: host\n</code></pre> <p>Success</p> <p>This example exposes a service running on port 8080 inside the container.It can be reached publicly at 192.168.10.20:80, where 192.168.10.20 is the public IP address of the node hosting the Microservice.</p> <p>In your <code>Pod</code>, <code>Deployment</code> or other workload, include <code>hostPort</code>.</p> <pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\nlabels:\napp: mymicros\nname: mymicros\nspec:\ntemplate:\nspec:\ncontainers:\n- image: digitbrain/codeigniter-php5\nname: codeigniter\nports:\n- containerPort: 8080\nhostPort: 80\n&lt;truncated&gt;\n</code></pre> <p>Success</p> <p>This example exposes a service running on port 8080 inside the container.It can be reached publicly at 192.168.10.20:80, where 192.168.10.20 is the public IP address of the node hosting the Microservice.</p>"},{"location":"adv/https/","title":"Enabling HTTPS","text":"<p>If you are using dynamic domain names, you can further benefit from automatic (letsencrypt) certificate generation and renewal.</p> <p>This feature is in beta. Please contact your support person if you wish to express interest in trialing it</p>"},{"location":"adv/model_data/","title":"Model &amp; Data Parameters","text":"<p>This section primarily concerns publishers of Microservices on the platform, and provides further info on how to refer to Model and Data in a Microservice configuration.</p> <p>You may be familiar with the Docker-Compose approach to variable substitution from a <code>.env</code> file. We support the same <code>${   }</code> braced syntax as Docker-Compose, but instead of the <code>.env</code> file, the available environment variables are defined by Model, Data, and Open Parameters.</p> <p>This section focuses on variables related to Model and Data that a Microservice developer can refer to in their Docker-Compose deployment data.</p>"},{"location":"adv/model_data/#model-parameters","title":"Model Parameters","text":"<p>Only a single instance of a Model can be bound in a Process. You can refer to the URI of a Model in your Docker-Compose with <code>${MODEL.repository_uri}</code>. See below for further examples.</p>"},{"location":"adv/model_data/#data-parameters","title":"Data Parameters","text":"<p>Since multiple instances of Data can be bound in a Process, the approach adds an additional step.</p> <p>First, define one or more Data Resources. The <code>ID</code> of the Data Resource is important, so keep it in mind. Later, a publisher of a Process that uses your Microservice will match each Data Resource you define with a concrete Data asset, so be sure to provide sufficient detail when defining your Data Resource.</p> <p>You can refer to the URI of a Data Resource with <code>${DATA_ID.uri}</code>.</p> <p>Example</p> <p>You refer to a given Data Resource in your Docker-Compose by using its <code>ID</code>. For example, refer to the URI of a Data Resource with <code>ID</code> SINK_A using <code>${SINK_A.uri}</code>. See below for further examples.</p>"},{"location":"adv/model_data/#examples-with-uri-fields","title":"Examples with URI Fields","text":"<p>The <code>repository_uri</code>, <code>uri</code>, <code>path</code>, and <code>filename</code> are some special fields available on both Model and Data assets. This section describes how to use them as parameters, for example in deploymentData.</p> <p>Tip</p> <p>You can refer to user-defined fields on Data assets with the same <code>${ }</code> notation used below.</p>"},{"location":"adv/model_data/#uri","title":"URI","text":"<p>You can use the <code>repository_uri</code> and <code>uri</code> fields of Model and Data, respectively, to define a complete URI.</p> ModelData <pre><code>version: '3.7'\nservices:\nristra:\nimage: dbs-container-repo.emgora.eu/db-ristra-cli-cpu:1.0.0\nentrypoint: /bin/sh -c\ncommand: wget ${MODEL.repository_uri}\n</code></pre> <pre><code>version: '3.7'\nservices:\nristra:\nimage: dbs-container-repo.emgora.eu/db-ristra-cli-cpu:1.0.0\nentrypoint: /bin/sh -c\ncommand: wget ${SINK_A.uri}\n</code></pre>"},{"location":"adv/model_data/#path-and-filename","title":"Path and Filename","text":"<p>Models support the <code>path</code> and <code>filename</code> fields for more granularity.</p> Model <pre><code>version: '3.7'\nservices:\nristra:\nimage: dbs-container-repo.emgora.eu/db-ristra-cli-cpu:1.0.0\nentrypoint: /bin/sh -c\ncommand: wget ${MODEL.path}/${MODEL.filename}\n</code></pre>"},{"location":"adv/model_data/#additional-fields","title":"Additional Fields","text":"<p>For even finer grain use cases with Model and Data, several automatic fields are generated from the <code>uri_repository</code> and <code>uri</code> fields, respectively.</p> <p>Example</p> <p>See the table below for fields generated for a <code>uri</code> or <code>repository_uri</code> of: https://user:pass@example.com:1234/path/to/service?key=value#something </p> Value Newly Generated Fields Value https <code>SCHEME</code> <code>PORT</code> 1234 user <code>USERNAME</code> <code>PATH</code> path/to/service pass <code>PASSWORD</code> <code>QUERY</code> key=value example.com <code>HOST</code> <code>FRAGMENT</code> something ModelData <pre><code>version: '3.7'\nservices:\nristra:\nimage: dbs-container-repo.emgora.eu/db-ristra-cli-cpu:1.0.0\nentrypoint: /bin/sh -c\ncommand: python3 start.py --path $URL --user ${MODEL.USERNAME} --pass ${MODEL.PASSWORD}\nenvironment:\nURL: ${MODEL.SCHEME}//${MODEL.HOST}:${MODEL.PORT}\n</code></pre> <pre><code>version: '3.7'\nservices:\nristra:\nimage: dbs-container-repo.emgora.eu/db-ristra-cli-cpu:1.0.0\nentrypoint: /bin/sh -c\ncommand: python3 start.py --path $URL --user ${SINK.USERNAME} --pass ${SINK.PASSWORD}\nenvironment:\nURL: ${SINK_A.SCHEME}//${SINK_A.HOST}:${SINK_A.PORT}\n</code></pre> <p>Note</p> <p>If a same-named field is defined manually by a user, it will not be overwritten. If a field cannot be determined from the <code>uri</code>, it will be blank.</p>"},{"location":"adv/params/","title":"Open Parameters","text":"<p>This section primarily concerns publishers of Microservices on the platform, and provides further info on how to refer to open parameters in a Microservice configuration.</p> <p>When some input to your Microservice is sensitive, or if there is some customisation that can be applied as the Process is started, DIGITbrain supports open parameters.</p> <p>Define these as a Microservice's Parameters and the Digital Agora will generate a web form when a Process starts, requesting that the user provide a value for each parameter of each Microservice bound to the Process. </p> <p>Tip</p> <p>When defining open parameters, keep the <code>name</code> of the parameter in mind, to refer to it later</p> <p>You may be familiar with the Docker-Compose approach to variable substitution from a <code>.env</code> file. We support the same <code>${   }</code> braced syntax as Docker-Compose, but instead of the <code>.env</code> file, the available environment variables are defined by Model &amp; Data, and Open Parameters.</p> <p>For open parameters, use the <code>${PARAMETER_NAME}</code> syntax to refer to them, for example in a Microservice's Docker-Compose.</p> <p>In Compose, you can still use regular environment variable shell substition within the <code>args</code> or <code>entrypoint</code> fields of the Compose, as in the example below. Please note that as per Compose documentation a single dollar-sign <code>$</code> must be escaped, by using double dollar-signs <code>$$</code>.</p> Defining ParametersReferencing Parameters <pre><code>parameters:\n- name: MINIO_URL\ntype: String\nmandatory: true\ndefaultValue: https://minio.example.com\ndescription: MinIO url\n- name: MINIO_ROOT_USER\ntype: String\nmandatory: true\ndefaultValue: admin\ndescription: MinIO username\n- name: MINIO_ROOT_PASS\ntype: String\nmandatory: true\ndescription: MinIO password\n</code></pre> <pre><code>version: '3.7'\nservices:\nristra:\nimage: dbs-container-repo.emgora.eu/db-ristra-cli-cpu:1.0.0\nentrypoint: python -m connect ${MINIO_URL} --user $$MINIOUSER --pass $$MINIOPASS\nenvironment:\nMINIOUSER: ${MINIO_ROOT_USER}\nMINIOPASS: ${MINIO_ROOT_PASS}\n</code></pre> <p>Warning</p> <p>Note that due to a bug in external tooling, environment variables with underscores in their names are not supported for shell substitution. If you need environment variable shell substitution, please use environment variables named without underscores.</p>"},{"location":"attributes/","title":"DIGITbrain Assets","text":"<p>Here you can find a detailed listing of the very latest specification for each of the DIGITbrain assets. Pick one to get started:</p> <ul> <li>Microservice</li> <li>Algorithm</li> <li>Model</li> <li>Behaviour</li> <li>Data</li> <li>Process</li> <li>Supporting Metadata</li> </ul>"},{"location":"attributes/configuration_data/","title":"Configuration Data","text":""},{"location":"attributes/configuration_data/#configuration-data-fields","title":"Configuration Data Fields","text":"<p>The specification for Configuration Data has these fields:</p> <code>file_path</code> <p>Optional-string full path to file including file name</p> Example <pre><code>data/rclone.conf\n</code></pre> <code>file_content</code> <p>Optional-string file content (not binary)</p> Example <pre><code>[s3-server]\naccess_key: 123abc\n</code></pre> <code>mount_propagation</code> <p>Optional-enum[ \"None\", \"HostToContainer\", \"Bidirectional\" ] Enable mountPropagation https://kubernetes.io/docs/concepts/storage/volumes/#mount-propagation . Defaults to None</p> Example <pre><code>Bidirectional\n</code></pre>"},{"location":"attributes/data_resource/","title":"Data Resources","text":""},{"location":"attributes/data_resource/#data-resource-fields","title":"Data Resource Fields","text":"<p>The specification for Data Resource has these fields:</p> <code>id</code> <p>Optional-String human-readable identifier, unique within a Microservice</p> Example <pre><code>\"MY_SINK\"\n</code></pre> <code>kind</code> <p>Optional-List[DATA_KIND] supported types of the data resource (e.g. file/object storage, database management system, streaming broker). FILE can mean a single file or a folder.</p> Example <pre><code>[\"FILE\", \"STREAM\"]\n</code></pre> <code>direction</code> <p>Optional-List[DATA_DIRECTION] supported direction of data flow (source: data provider, sink: data consumer/storage)</p> Example <pre><code>[\"SOURCE\", \"BIDIRECTIONAL\"]\n</code></pre> <code>format</code> <p>Optional-List[DATA_FORMAT] supported format/encoding of the data produced or consumed by the data resource as a MIME type (IETF RFC 6838 https://www.sitepoint.com/mime-types-complete-list/). More than one can appear here (remote directory with several files).</p> Example <pre><code>[\"application/zip\", \"image/jpg\"]\n</code></pre> <code>source_type</code> <p>Optional-List[DATA_SOURCE_TYPE] supported exact type of the data resource. Typically corresponds to the scheme part (protocol://) of DATA_URI</p> Example <pre><code>[\"MYSQL\", \"KAFKA\"]\n</code></pre> <code>auth_type</code> <p>Optional-List[DATA_AUTH_TYPE] supported authentication type</p> Example <pre><code>[\"tls_mutual\", \"userpass\"]\n</code></pre> <code>schema</code> <p>Optional-List[DATA_SCHEMA] supported internal message structure, semantics, ontology. It can be any file (doc, rdf, owl, etc.). Asset Administration Shell, IEC 61360 - Common Data Dictionary, \u2026</p> Example <pre><code>[\"jpg\"]\n</code></pre> <code>aux_info</code> <p>Optional-Map[String, String] List of key-value pairs (JSON object/YAML dictionary) supported by the data resource. New keys can be added on demand, a list of known keys is available.</p> Example <pre><code>{\"PROTOCOL\": \"http\", \"MYSQL_DIALECT\": \"mariadbdialect\", \"MQTT_PROTOCOL_VERSION\": \"3.1.1\", \"KAFKA_BROKER_VERSION\": \"2.7.0\", \"S3_REGION\": \"eu-central-1\"}\n</code></pre>"},{"location":"attributes/dataassetsmapping/","title":"Data Assets Mapping","text":""},{"location":"attributes/dataassetsmapping/#dataassetsmapping-fields","title":"DataAssetsMapping Fields","text":""},{"location":"attributes/dataassetsmapping/#available-fields","title":"Available Fields","text":"<p>The metadata specification for a DIGITbrain DataAssetsMapping has these sections:</p> <ul> <li>DataAssetsMapping</li> </ul>"},{"location":"attributes/dataassetsmapping/#dataassetsmapping","title":"DataAssetsMapping","text":"<code>*MICROSERVICE_ID*</code> <p>Required-Map[String, String]- The key(s) here are UUID string(s) corresponding to the ID(s) of the Microservice(s) defined for this Algorithm.  The value for this key is a mapping of the logical IDs of Data Assets to the UUIDs of Data Assets.</p> <code>*DATA_ID_LOGICAL*</code> <p>Required-String- The key(s) here are logical IDs (string identifiers) of Data Assets that act as placeholders in the DeploymentData field of a Microservice.  The value for each key is the UUID of the Data Asset that should be substituted into the placeholders in the DeploymentData field.</p> Example <pre><code>\"DATAID_MYDATA_A\"\n</code></pre>"},{"location":"attributes/deployment/","title":"Deployment","text":""},{"location":"attributes/deployment/#deployment-fields","title":"Deployment Fields","text":"<p>The specification for Deployment has these fields:</p> <code>type</code> <p>Note</p> <p>The other metadata in this section should be completed according to the type (e.g. CloudBroker-specific metadata is not required if <code>type: edge</code>)</p> Example <pre><code>cloudbroker\n</code></pre>"},{"location":"attributes/deployment/#cloudbroker","title":"Cloudbroker","text":"<code>deployment_id</code> <p>Required-string (UUID) A CloudBroker deployment ties together software, resource and region. Indicative IDs are given below, but any LTS Debian-based Linux distribution should be supported. It is recommended to use the MiCADO-Optimised deployment.</p> MiCADO-OptimisedUbuntu 20.04Ubuntu 18.04Custom <pre><code>1860cb3f-4f23-417f-a1f1-3705158cd3b3\n</code></pre> <pre><code>16b1e2d4-3a2c-406e-8c45-5637099021f0\n</code></pre> <pre><code>5a081b54-8992-4ff7-8a21-74e425062507\n</code></pre> <pre><code># Find a deployment_id by inspecting the URL\nhttps://&lt;cloudbroker-endpoint&gt;/deployments/&lt;deployment-id&gt;\n</code></pre> <code>instance_type_id</code> <p>Required-string (UUID) The CloudBroker instance type defines the CPU and RAM that will be available on the infrastructure. Indicative IDs are given below. The minimum requirements are a 2 vCPU/2GB RAM</p> 2 vCPU | 4GB RAM4 vCPU | 8GB RAM8 vCPU | 16GB RAMCustom <pre><code>ca727925-a5ca-4697-b2c3-8788d82457d5\n</code></pre> <pre><code>ffb42759-fb52-4401-9c75-889ea0ed9602\n</code></pre> <pre><code>664330f3-42b1-4f52-a675-fd182a21ef51\n</code></pre> <pre><code># Find an instance_type_id by inspecting the URL\nhttps://&lt;cloudbroker-endpoint&gt;/instance_types/&lt;instance-type-id&gt;\n</code></pre> <code>key_pair_id</code> <p>Optional-string (UUID) ID of CloudBroker Key Pair</p> Example <pre><code># Find a key_pair_id by inspecting the URL\nhttps://&lt;cloudbroker-endpoint&gt;/key_pairs/&lt;key-pair-id&gt;\n</code></pre> <code>opened_port</code> <p>Required-string (comma separated integers) A comma-separated string listing port numbers, which will be opened on the instance (both TCP and UDP protocols will be affected). </p> <p>Danger</p> <p>Port 51820 must be included in this list to ensure containers can communicate</p> MinimalSSH, HTTP, HTTPS <pre><code>51820\n</code></pre> <pre><code>51820,22,80,443\n</code></pre> <code>cloud_config</code> <p>Optional-string (JSON) cloud-init config for contextualisation of the provisioned virtual machine.</p> Example <pre><code>{\"runcmd\": [\"echo 'task one'\", \"echo 'task two'\"]}\n</code></pre> <code>endpoint</code> <p>Required-string (URL) The endpoint of the CloudBroker platform that will handle the deployment of the above infrastructure.</p> Default <pre><code>https://cloudsme-cbp.scaletools.com.ua\n</code></pre> <code>domain_name</code> <p>Optional-string Subdomain (on cbp-routing.ch) to create and attach to this instance using dynamic DNS. For the given example, the domain <code>my-subdomain.cbp-routing.ch</code> will be assigned to the instance. </p> <p>Warning</p> <p>Only letters, numbers and hyphens are allowed in domain names.</p> Example <pre><code>my-subdomain\n</code></pre>"},{"location":"attributes/deployment/#edge","title":"Edge","text":"<code>endpoint</code> <p>Required-string The endpoint of the bring-your-own Edge device that provides this Deployment.</p> Example <pre><code>192.168.1.1\n</code></pre> <code>ssh_private_key</code> <p>Optional-String private key for SSH connection.</p> Example <pre><code>-----BEGIN RSA PRIVATE KEY-----\nMIIBOgIBAAJBAKj34GkxFhD90vcNLYLInFEX6Ppy1tPf9Cnzj4p4WGeKLs1Pt8Qu\nKUpRKfFLfRYC9AIKjbJTWit+CqvjWYzvQwECAwEAAQJAIJLixBy2qpFoS4DSmoEm\n...\n</code></pre> <code>ssh_username</code> <p>Optional-String username for SSH connection. Defaults to ubuntu</p> Example <pre><code>ubuntu\n</code></pre>"},{"location":"attributes/metrics/","title":"Metrics","text":""},{"location":"attributes/metrics/#metrics-fields","title":"Metrics Fields","text":"<p>The specification for Metrics has these fields:</p> <code>name</code> <p>Optional-String short name (should be unique across the Microservice's metrics)</p> Example <pre><code>\"meanTemperature\"\n</code></pre> <code>corresponding_measurement</code> <p>Optional-String identification of the corresponding measurement, i.e. output of the Model</p> Example <pre><code>\"temperature1\"\n</code></pre> <code>function</code> <p>Optional-String short description of the mathematical approach used to derive this value</p> Example <pre><code>\"arithmetic mean\"\n</code></pre> <code>unit</code> <p>Optional-String the unit of the metric measurement</p> Example <pre><code>\"degree celsius\"\n</code></pre> <code>description</code> <p>Optional-String short description of the metric measurement</p> Example <pre><code>\"This metric describes the arithmetic mean of the approximated temperatures of the fabricated part when it leaves station 4.\"\n</code></pre>"},{"location":"attributes/parameters/","title":"Parameters","text":""},{"location":"attributes/parameters/#parameters-fields","title":"Parameters Fields","text":""},{"location":"attributes/parameters/#available-fields","title":"Available Fields","text":"<p>The metadata specification for a DIGITbrain Parameters has these sections:</p> <ul> <li>Parameters</li> </ul>"},{"location":"attributes/parameters/#parameters","title":"Parameters","text":"<code>name</code> <p>Required-String- short name for this parameter (should be unique across the Microservice\u2019s parameters)</p> Example <pre><code>\"detection_threshold\"\n</code></pre> <code>type</code> <p>Required-Enumeration [xsd datatypes]- expected input type (may be used to verify the input)</p> Example <pre><code>\"Integer\"\n</code></pre> <code>mandatory</code> Optional-Boolean- whether this parameter is mandatory (default: false)Example <pre><code>true\n</code></pre> <code>defaultValue</code> Optional-has to match \"type\"- a default value, if the parameter is required but not providedExample <pre><code>42\n</code></pre> <code>description</code> <p>Required-String- short description of the parameter and its possible values</p> Example <pre><code>\"This parameter can be used to configure the included algorithm in a certain way, possible values: 'A', 'B', 'Z'\"\n</code></pre>"},{"location":"attributes/slots/","title":"Slots","text":""},{"location":"attributes/slots/#slots-fields","title":"Slots Fields","text":"<p>The specification for Slots has these fields:</p> <code>key</code> <p>Optional-string unique (within a Model) machine-readable identifier matching [a-zA-Z_][a-zA-Z_0-9]*</p> Example <pre><code>force_1\n</code></pre> <code>name</code> <p>Optional-string Human-readable identifier</p> Example <pre><code>Force at Boundary Condition 1\n</code></pre> <code>dimensions</code> <p>Optional-number (integer-valued) | array of integer-valued numbers, default is 1 (scalar) dimension of inputs to in-slot, array of dimensions for matrices / tensors</p> Example <pre><code>1\n</code></pre> <code>is_continuous</code> <p>Optional-bool, default is true (real) flag to indicate whether slot values are integer or real numbers</p> Real NumbersIntegers <pre><code>True\n</code></pre> <pre><code>False\n</code></pre> <code>units</code> <p>Optional-Units Values related to the slot measurement units</p> <code>default_value</code> <p>Optional-number | null default value for in-slot, if null then the value for the in-slot needs to be set/fed at a later point in time.</p> <p>Warning</p> <p>Default value must not be set for out-slots!</p> <code>ranges</code> <p>Optional-array | null valid range of values (2-tuple array minimum maximum values OR array of discrete valid scalars).If a valid range is not known a-priori: null / omitted</p>"},{"location":"attributes/supporting_metadata/","title":"Supporting Metadata","text":""},{"location":"attributes/supporting_metadata/#supporting-metadata-fields","title":"Supporting Metadata Fields","text":""},{"location":"attributes/supporting_metadata/#available-fields","title":"Available Fields","text":"<p>The metadata specification for a DIGITbrain Supporting Metadata has these sections:</p> <ul> <li>Person</li> <li>Legal Entity (Organization)</li> <li>IP Family</li> <li>IP Instance</li> </ul>"},{"location":"attributes/supporting_metadata/#person","title":"Person","text":"<code>ID</code> Auto-generated-ID / URI- Unique identifier for the Person <code>Created at</code> Auto-generated-ISO 8601- Date of creation <code>Version</code> Auto-generated-Integer- Version number of the Person <code>First name</code> Required-Text- First name of the Person <code>Last name</code> Required-Text- Last name of the Person <code>Email</code> Required-Email- Email address of the Person <code>CV</code> Optional-Text- Short description of the Person <code>Image</code> Optional-Image- Profile picture of the Person <code>Affiliation</code> Optional-ID / URI- Legal Entity the Person is affiliated with"},{"location":"attributes/supporting_metadata/#legal-entity-organization","title":"Legal Entity (Organization)","text":"<code>ID</code> Auto-generated-ID / URI- Unique identifier for the Legal Entity <code>Created at</code> Auto-generated-ISO 8601- Date of creation <code>Version</code> Auto-generated-Integer- Version number of the Legal Entity <code>Author</code> Required-ID / URI- Identifier of the Author of the Legal Entity <code>Name</code> Required-Text- Name of the Legal Entity <code>Description</code> Required-Text- Description of the Legal Entity <code>Logo</code> Optional-Image- Logo of the Legal Entity <code>URL</code> Optional-URL- Website of the Legal Entity <code>Location</code> Optional-ID / URI?- Physical address of the Legal Entity <code>Phone</code> Optional-String- Phone Number of the Legal Entity <code>VAT ID No.</code> Optional-String- VAT ID Number of the Legal Entity"},{"location":"attributes/supporting_metadata/#ip-family_1","title":"IP Family","text":"<code>ID</code> Auto-generated-ID / URI- Unique identifier for the IP Fam. <code>Created at</code> Auto-generated-ISO 8601- Date of creation <code>Version</code> Auto-generated-Integer- Version number of the IP Family <code>Author</code> Required-ID / URI- Identifier of the Author of the IP Family <code>Manager</code> Required-ID / URI- Identifier of the Legal Entity managing the IP Family <code>Name</code> Required-Text- Technical Name of the IP Family <code>Image</code> Optional-Image- Picture of the IP Family <code>Model No.</code> Optional-Text- Number defined by the IP Man. <code>Description</code> Optional-Text- Description of the IP Family <code>Capacity</code> Optional-Text- Capacity of the IP Family <code>IP Man.</code> Optional-ID / URI- Identifier of the IP Manufacturer (Legal Entity)"},{"location":"attributes/supporting_metadata/#ip-instance","title":"IP Instance","text":"<code>ID</code> Auto-generated-ID / URI- Unique identifier for the IP Inst. <code>Created at</code> Auto-generated-ISO 8601- Date of creation <code>Version</code> Auto-generated-Integer- Version number of the IP Instance <code>Author</code> Required-ID / URI- Identifier of the Author of the IP Instance <code>Operator</code> Required-ID / URI- Identifier of the Legal Entity operating the IP Instance <code>IP Family</code> Required-ID / URI- Reference to the IP Family <code>Name</code> Required-Text- Name of the IP Instance <code>Image</code> Optional-Image- Picture of the IP Instance <code>Serial No.</code> Optional-Text- Number defined by the IP Man. <code>Description</code> Optional-Text- Description of the IP Instance <code>Location</code> Optional-ID / URI?- Physical location of the IP Instance"},{"location":"attributes/units/","title":"Units","text":""},{"location":"attributes/units/#units-fields","title":"Units Fields","text":"<p>The specification for Units has these fields:</p> <code>unit</code> <p>Optional-string human readable unit symbol, here N for Newton</p> Example <pre><code>N\n</code></pre> <code>exponent</code> <p>Optional-number[] 7-tuple of integer-valued exponents*- Ordered list of SI base units</p> <ul> <li>1st entry: Length - meter (m)</li> <li>2nd entry: Time - second (s)</li> <li>3rd entry: Amount of substance - mole (mol)</li> <li>4th entry: Electric current - ampere (A)</li> <li>5th entry: Temperature - kelvin (K)</li> <li>6th entry: Luminous intensity - candela (cd)</li> <li>7th entry: Mass - kilogram (kg)</li> </ul> <p>Explanation</p> <p>the exponents reference the above SI base units in the corresponding order to describe the unit w.r.t. the base SI units, the entries [1, -2, 0, 0, 0, 0, 1] thus denote m s\u207b\u00b2 kg, i.e., Newton</p> Example <pre><code>[1, -2, 0, 0, 0, 0, 1]\n</code></pre> <code>offset</code> <p>Warning</p> <p>For absolute temperatures only! For temperature differences, this must be omitted!</p> <code>scale</code> <p>Optional-number default value is 1*- allows to scale the values into base units, e.g., 1e-3 to describe mm (millimeters) in terms of m (meters)</p> Example <pre><code>1\n</code></pre>"},{"location":"attributes/algorithm/","title":"Algorithm","text":""},{"location":"attributes/algorithm/#algorithm-fields","title":"Algorithm Fields","text":"<p>For a more condensed summary this information is available in table view</p> <p>The specification for Algorithm has these fields:</p> <code>name</code> <p>Required-string a human-readable name\u00a0to ease identification and\u00a0discoverability\u00a0for human users</p> Example <pre><code>\"Object Detection Algorithm for detection of faulty weld seams\"\n</code></pre> <code>description</code> <p>Required-string a short, human-readable\u00a0description of the Algorithm\u00a0to aid a human user in analysing the Algorithm\u2019s capabilities and\u00a0its applicability to a certain problem</p> Example <pre><code>\"This algorithm can be used to solve a specifc problem, and applies some fancy technologies.\"\n</code></pre> <code>classification_schema</code> <p>Required-enum [Simulation, ML, others] the classification of the Algorithm, to describe the specialization area</p> Example <pre><code>\"ML\"\n</code></pre> <code>type</code> <p>Required-string[] a detailed list of attributes to describe the Algorithm\u2019s field of application</p> Example <pre><code>[\"neural network\", \"deep learning\", \"convolutional neural network\", \"CNN\"]\n</code></pre> <code>version</code> <p>Optional-string the version, as defined by the provider</p> Example <pre><code>\"1.0\"\n</code></pre> <code>list_of_microservices</code> <p>Required-string[] a list of Microservice Asset IDs, which are contained in the algorithm</p> Example <pre><code>[\"MSID_MYMS_A\", \"MSID_MYMS_B\"]\n</code></pre> <code>deployment_mapping</code> <p>Required-string a mapping specifying which microservice should run on which host. By default each microservice is assigned a respective host, but this behaviour is not always ideal (eg. when two or more Microservices may need to run on the same host)</p> Example <pre><code>{\"MSID_MYMS_A\": \"HOSTID_MYHOST_A\", \"MSID_MYMS_B\": \"HOSTID_MYHOST_A\"}\n</code></pre>"},{"location":"attributes/data/","title":"Data","text":""},{"location":"attributes/data/#data-fields","title":"Data Fields","text":"<p>For a more condensed summary this information is available in table view</p> <p>The specification for Data has these fields:</p> <code>name</code> <p>Required-string Name of the data resource.</p> Example <pre><code>\"CNSPiezoBolt#1 (in directory: factory 1 , machine1 , piezobolts)\"\n</code></pre> <code>version</code> <p>Optional-string Version of the data resource (not of the metadata), defined by the provider in the format of his/her choice (typically: major.minor.patch)</p> Example <pre><code>\"1.0.0\"\n</code></pre> <code>description</code> <p>Optional-string Human readable description of the data resource characteristics, contents.</p> Example <pre><code>\"This sensor measures temperature in Celsius, sends data via ConSenses edge device via an MQTT broker\"\n</code></pre> <code>description_url</code> <p>Optional-string More detailed specification of data source characteristics (doc, pdf, \u2026)</p> Example <pre><code>\"https://some-host/docs/data-source-specification-sheet.pdf\"\n</code></pre> <code>size</code> <p>Optional-integer Estimated/exact size of data (e.g. file size, volume size, or message size); might be used to assess HW requirements (RAM, CPU). In bytes.</p> Example <pre><code>112\n</code></pre> <code>tags</code> <p>Optional-string[] A list of tags freely added to help in searching/indexing (not limited to a basic set of tags, keywords)</p> Example <pre><code>[\"sensor\", \"celsius\", \"press machine\"]\n</code></pre> <code>kind</code> <p>Required-enum [FILE, DATABASE, STREAM] Main category of the data resource (e.g. file/object storage, database management system, streaming broker). FILE can mean a single file or a folder.</p> Example <pre><code>\"STREAM\"\n</code></pre> <code>direction</code> <p>Required-enum [SOURCE, SINK, BIDIRECTIONAL] Direction of data flow (source: data provider, sink: data consumer/storage)</p> Example <pre><code>\"SOURCE\"\n</code></pre> <code>format</code> <p>Optional-string[] Format/encoding of the data produced or consumed by the data resource as a MIME type (IETF RFC 6838 https://www.sitepoint.com/mime-types-complete-list/). More than one can appear here (remote directory with several files).</p> Example <pre><code>[\"application/json\"] </code></pre> <code>type</code> <p>Required-string The exact type of the data resource. Typically (but not always) corresponds to the scheme part (scheme://) of URI. E.g.: mysql, mqtt.</p> Example <pre><code>\"MQTT\"\n</code></pre> <code>uri</code> <p>Optional-string Accessibility of the data resource, including host, port information, protocol, and other fields (path is protocol dependent, can be a topic name). GUI may show host, port, path separately. Hidden at search. Format: scheme://host:port/path.  Pseudo vars: SCHEME, HOST, PORT, PATH, QUERY, FRAGMENT.</p> Example <pre><code>[\"kafka://host/topic#1\"]\n</code></pre> <code>auth_type</code> <p>Required-string[] One or more authentication types that can be accepted by the storage resource.</p> Example <pre><code>[\"tls_client_certificate\"]\n</code></pre> <code>credentials</code> <p>Optional-string Credentials (e.g. string/json, zip, config file). Its content (structure) depends on authentication type (e.g. token, username and password). OPEN means must not be filled here, but asked from user on startup.</p> Example <pre><code>-\n</code></pre> <code>aux_info</code> <p>Optional-string List of key-value pais (JSON object/YAML dictionary) for additional specification of the data resource. New keys can be added on demand, a list of known keys is available.</p> Example <pre><code>{\"PROTOCOL\": \"tcp\", \"MQTT_PROTOCOL_VERSION\": \"3.1.1\", \"KAFKA_BROKER_VERSION\": \"2.7.0\"}\n</code></pre> <code>schema</code> <p>Optional-string Describes message internal structure, semantics, ontology. It can be any file (doc, rdf, owl, etc.). Asset Administration Shell, IEC 61360 - Common Data Dictionary, ...</p> Example <pre><code>\"Messages constain raw sensor values as floats in Celsius, each is a JSON object with key name 'temperature'.\"\n</code></pre> <code>schema_url</code> <p>Optional-string URL to schema specification document (in some format, rdf, owl, xsd, \u2026)</p> Example <pre><code>\"https://schemas.org/data.rdf\"\n</code></pre>"},{"location":"attributes/dma_tuple/","title":"Process (D + MA)","text":""},{"location":"attributes/dma_tuple/#process-fields","title":"Process Fields","text":"<p>The specification for Process has these fields:</p> <code>name</code> <p>Required-string Short name to identify the Process</p> Example <pre><code>Pressure drop for the injection in hall 3\n</code></pre> <code>description</code> <p>Required-string Short description of the scope of the Process (human readable)</p> Example <pre><code>Effectiveness of the mold closing process\n</code></pre> <code>version</code> <p>Required-string Version number of the Process, defined by the provider</p> Example <pre><code>0.21.0\n</code></pre> <code>ip_instance</code> <p>Required-string Identifier of the IP Instance the Process is valid for (NB: Entity for IP Instance is referenced)</p> Example <pre><code>ip_instance_123e4567-e89b-12d3\n</code></pre> <code>ma_pair</code> <p>Required-string Identifier of the Behaviour (MA Pair) associated to the Process</p> Example <pre><code>MAID_MYMA\n</code></pre> <code>deployments</code> <p>Required-Deployment Mapping of characteristics of the Deployment (i.e. Cloud or Edge infrastructure) for every Microservice associated to the Process</p> <code>data_assets_mapping</code> <p>Optional-DataAssetsMapping Mapping required Data assets to Microservices specified in the Behaviour (MA Pair). Not every Microservice needs a Data asset.</p> <code>namespace</code> <p>Optional-string Context to interpret the associated information</p> Example <pre><code>namespace_123e4567-e89b-12d3\n</code></pre> <code>payload</code> <p>Optional-string (JSON) User-defined key-value pairs with additional information</p> Example <pre><code>{\"injectionMold\": \"Circuit Case\"}\n</code></pre> <code>schedule</code> <p>Optional-string Days and hours the Process will be active</p> Example <pre><code>R90/2021-05-01T00:00:00Z/PT48H\n</code></pre>"},{"location":"attributes/ma_pair/","title":"Behaviour (M + A)","text":""},{"location":"attributes/ma_pair/#behaviour-fields","title":"Behaviour Fields","text":"<p>For a more condensed summary this information is available in table view</p> <p>The specification for Behaviour has these fields:</p> <code>version</code> <p>Optional-string Version number of the MA Pair, defined by the provider</p> Example <pre><code>\"0.21.0\"\n</code></pre> <code>derivation</code> <p>Optional-string In case of derivation, references to parent / child (optional)</p> Example <pre><code>ma_pair_123e4567-e89b-12d3 (auto)\n</code></pre> <code>name</code> <p>Required-string Short name to identify the MA Pair</p> Example <pre><code>Pressure drop\n</code></pre> <code>description</code> <p>Required-string Short description of the scope of the MA Pair (human readable)</p> <code>ip_family</code> <p>Required-string Identifier of the IP Family the MA Pair is valid for</p> Example <pre><code>ip_family_123e4567-e89b-12d3\n</code></pre> <code>namespace</code> <p>Optional-string Context to interpret the associated information (optional?)</p> Example <pre><code>namespace_123e4567-e89b-12d3\n</code></pre> <code>m_asset</code> <p>Required-string Identifier of the Model Asset associated to the MA Pair (NB: The corresponding model file is indicated in Model metadata (first tab) as Model_URI and the corresponding zip file needs to be served to the Algorithm to evaluate the Model by the Microservice (MODEL_FILENAME))</p> <p>Note: This is a Foreign Key to <code>model.id</code>.</p> Example <pre><code>\"MODID_MYMODEL\"\n</code></pre> <code>a_asset</code> <p>Required-string Identifiers of the Algorithm Asset associated to the MA Pair</p> <p>Note: This is a Foreign Key to <code>algorithm.id</code>.</p> Example <pre><code>\"ALGID_MYALG\"\n</code></pre> <code>rules</code> <p>Optional-string[] References to recommended Rules to be verified per Evaluation of the MA Pair</p> Example <pre><code>rules_123e4567-e89b-12d3\n</code></pre> <code>frequency</code> <p>Optional-integer Recommended number of evaluations conducted per hour for the MA Pair (optional)</p> Example <pre><code>12\n</code></pre> <code>payload</code> <p>Optional-string User-defined key-value pairs: JSON string with additional information (optional)</p> Example <pre><code>{\u2018minPressure\u2019: 90, \u2018maxPressure\u2019: 120}\n</code></pre>"},{"location":"attributes/microservice/","title":"Microservice","text":""},{"location":"attributes/microservice/#microservice-fields","title":"Microservice Fields","text":"<p>For a more condensed summary this information is available in table view</p> <p>The specification for Microservice has these fields:</p> <code>name</code> <p>Required-string human readable short, yet descriptive name of the Microservice.</p> Example <pre><code>\"Object Detection for faulty parts\"\n</code></pre> <code>version</code> <p>Optional-string version as defined by the user.</p> Example <pre><code>\"1.0\"\n</code></pre> <code>description</code> <p>Required-string human readable short description of the Microservice's capabilities.</p> Example <pre><code>\"This microservices solves a certain problem using very specific methods\u2026\"\n</code></pre> <code>classification_schema</code> <p>Required-enum [Simulation, ML, others] fine-granular classification of the Microservice</p> Example <pre><code>\"others\"\n</code></pre> <code>type</code> <p>Required-string[] detailed type of the microservice, list of keywords</p> Example <pre><code>[\"neural network\", \"deep learning\", \"convolutional neural network\", \"CNN\"]\n</code></pre> <code>deployment_format</code> <p>Required-enum [docker-compose, kubernetes-manifest] identifier of the deployment environment required to deploy the Microservice's container</p> Example <pre><code>\"docker-compose\"\n</code></pre> <code>deployment_data</code> <p>Required-string (YAML) DIGITbrain supports Microservices in containers. The platform aims to support any OCI-compliant container images, as mentioned in pre-requisites. Containers are  generally described in a variety of formats and the platform aims to support the most common kinds.</p> <p>We currently support the description of one container in either the Docker-Compose format or one Pod or Deployment in the Kubernetes manifest format.</p> <p>Warning</p> <p>Compose files are translated to Kubernetes by the official Kubernetes Kompose project. Be aware that Kubernetes does not support the same set of functionalities as Compose. This matrix shows the Compose properties that are supported when translating to Kubernetes.</p> <p>Tip</p> <p>If you normally run your container with docker run we suggest using the online, open-source Composerize tool, which can translate the command to a Docker-Compose file.</p> Docker-ComposeKubernetes Manifest <pre><code>services:\nreverseproxy:\nimage: nginx:latest\nports:\n- '8080:8080'\nrestart: always\n</code></pre> <pre><code>apiVersion: v1\nkind: Pod\nmetadata:\nname: reverseproxy\nspec:\ncontainers:\n- name: reverseproxy\nimage: nginx:latest\nports:\n- containerPort: 8080\n</code></pre> <code>configuration_data</code> <p>Optional-ConfigurationData[] List of objects specifying configuration file(s) content required by the service</p> Example <pre><code>file_path: /data/rclone.conf\nfile_content: |\n[s3-server]\naccess_key: 123abc\nmount_propagation: Bidirectional\n</code></pre> <code>mounted_shared_directories</code> <p>Optional-string A note for developers of co-operating Microservices. Directories that should be shared to the host where this microservice can find required inputs / store outputs</p> Example <pre><code>\"/data and /cfg are mounted on the host for data and configuration sharing, respectively.\"\n</code></pre> <code>recommended_number_of_gpus</code> <p>Optional-integer recommended number of GPUs</p> Example <pre><code>2\n</code></pre> <code>recommended_gpu_ram</code> <p>Optional-integer recommended amount of GPU memory in GB</p> Example <pre><code>6\n</code></pre> <code>gpu_type</code> <p>Optional-string a description of the type of GPUs, and further specifications, to allow the execution of the Microservice</p> Example <pre><code>\"NVidia (compute capability &gt;= 7.0)\"\n</code></pre> <code>hpc_required</code> <p>Optional-boolean whether this Microservice requires an HPC environment to be executed efficiently</p> Example <pre><code>true\n</code></pre> <code>edge_type</code> <p>Optional-enum [TPU (Google), NPU (Qualcomm), FPGA, NVIDIA Jetson AGX] required type of edge device to allow the execution of the Microservice</p> Example <pre><code>\"NVIDIA Jetson AGX\"\n</code></pre> <code>recommended_ram</code> <p>Optional-integer recommended amount of memory in GB</p> Example <pre><code>16\n</code></pre> <code>recommended_cpus</code> <p>Optional-integer recommended number of CPU cores</p> Example <pre><code>4\n</code></pre> <code>required_disk_space</code> <p>Optional-integer required amount of disk space in GB</p> Example <pre><code>42\n</code></pre> <code>os_arch</code> <p>Optional-string supported os architecture. Defaults to x86</p> Example <pre><code>\"x86_64\"\n</code></pre> <code>os_type</code> <p>Optional-string supported os type. Defaults to Linux</p> Example <pre><code>\"linux\"\n</code></pre> <code>data_resource</code> <p>Optional-Data Resource[] list of Data objects for each required data resource, specified using the \"DATA\" fields in the linked substructure</p> Example <pre><code>kind: [FILE, STREAM]\ndirection: [SOURCE]\nformat: [application/zip, image/jpg]\nsource_type: [MYSQL, KAFKA]\nauth_type: [userpass]\nschema: [jpg]\naux_info:\nPROTOCOL: http\nMYSQL_DIALECT: mariadbdialect\n</code></pre> <code>model_types</code> <p>Optional-string[] list of supported Model types</p> Example <pre><code>[\"SavedModel (Tensorflow)\"]\n</code></pre> <code>model_recommended_auth_tools</code> <p>Optional-string[] list of recommended AuthoringTools used to generate the Model</p> Example <pre><code>[\"PreSTRA\"]\n</code></pre> <code>parameters</code> <p>Required-Parameters[] list of Parameter objects for each possible parameters, to be specified before deployment</p> Example <pre><code>parameters:\n- name: detection_threshold\ntype: Integer\nmandatory: true\ndefaultValue: 42\ndescription: This parameter is helpful\n</code></pre> <code>metrics</code> <p>Optional-Metrics[] list of Metric objects for each metric collected by the Microservice</p> Example <pre><code>metrics:\n- name: meanTemperature\ncorrespondingMeasurement: temperature1\nfunction: arithmetic mean\nunit: degree celcius\ndescription: The metric is good\n</code></pre> <code>is_gui</code> <p>Optional-boolean (boolean) indicates that this microservice exposes a graphical user interface (web). Defaults to False.</p> Example <pre><code>True\n</code></pre> <code>workload_type</code> <p>Optional-enum [service, job, undefined] (enum[\"service\", \"job\", \"undefined\"]) specifies the workload type. service for long running microservices that must be shut-down by the user. job for batch operations that should shut-down after microservice completes succesfully. undefined for other, that must be shut-down by the user. Defaults to undefined.</p> Example <pre><code>\"service\"\n</code></pre>"},{"location":"attributes/model/","title":"Model","text":""},{"location":"attributes/model/#model-fields","title":"Model Fields","text":"<p>For a more condensed summary this information is available in table view</p> <p>The specification for Model has these fields:</p> <code>name</code> <p>Required-string Name of the model</p> <code>version</code> <p>Optional-string Version of the model, defined by the provider. </p> Example <pre><code>\"0.1\"\n</code></pre> <code>license</code> <p>Optional-string License of the model.  Type tbd in SAD group</p> <code>provider_contacts</code> <p>Optional-string Dictionary with keys being phone, email, address - Type takes into account co-simulation models, for which solver info is mandatory (next slide)</p> <code>description</code> <p>Optional-string Model tag description Additional info about model files (e.g. versioning, scope, i.e. what is the model used for, e.g. simulation, control, etc.) - Human readable marketplace description</p> Example <pre><code>This is a brilliant model for doing complex things.\n</code></pre> <code>auth_tool</code> <p>Optional-string Authoring Tool used to create the model</p> <code>type</code> <p>Optional-string ML, LCA, 3D FEM and CFD, System simulation, discrete event simulation, co-simulation (it couples a model with specific algorithms) - The original term Path was proposed to be changed (SAD)</p> <code>fidelity</code> <p>Optional-integer Error of the model\u2019s prediction</p> <code>repository_uri</code> <p>Required-string Where the model file is stored (usually the DigitBrain certified external model repository). The path and model filename are not provided via this field.</p> Example <pre><code>\"https://www.myrepo.com\"\n</code></pre> <code>path</code> <p>Required-string Path to the model file in the specified repository, not including the filename itself.</p> Example <pre><code>\"input/models\"\n</code></pre> <code>filename</code> <p>Required-string Name of the model file at the given path within the given repo, with a file extension if it exists.</p> Example <pre><code>\"mymodel.pb\"\n</code></pre> <code>state_depend</code> <p>Optional-boolean stateful -&gt; 1, stateless -&gt; 0</p> <code>inslots</code> <p>Optional-Slots[] List of objects with values on which the model is evaluated (or parameters that might set before or during the evaluation) - Inputs and parameters together, although if needed we can still differentiate them internally in key field for each specific model.</p> Example <pre><code>[\n{ \"Key\": \"MY_INSLO_A\",\n\"Name\": \"ModelABin\",\n\"Dimensions\": 112,\n\"Is-continuous\": true,\n\"Units\": {\n\"Unit\": \"Pa\",\n\"Exponent\": [1, -2, 0],\n\"Offset\": 442,\n\"Scale\": 10^-3\n},\n\"Default-value\": 55,\n\"Ranges\": [1,120]\n}\n]  </code></pre> <code>outslots</code> <p>Optional-Slots[] List of objects with values that the model approximates</p> Example <pre><code>[\n{ \"Key\": \"MY_OUTPUT_A\",\n\"Name\": \"ModelABout\",\n\"Dimensions\": 112,\n\"Is-continuous\": true,\n\"Units\": {\n\"Unit\": \"Pa\",\n\"Exponent\": [1, -2, 0],\n\"Offset\": 442,\n\"Scale\": 10^-3\n},\n\"Default-value\": 55,\n\"Ranges\": [1,120]\n}\n]  </code></pre> <code>os_arch</code> <p>Optional-string OS architecture type (e.g. x86_64)</p> <code>os_type</code> <p>Optional-string OS type (e.g. Windows, Linux)</p> <code>os_distribution</code> <p>Optional-string OS distributun (e.g. Ubuntu, Fedora)</p> <code>recommended_number_of_gpu_cores</code> <p>Optional-integer Recommended number of GPU cores</p> <code>minimum_number_of_gpu_cores</code> <p>Optional-integer Minimum required number of GPU cores</p> <code>recommended_gpu_ram</code> <p>Optional-integer Recommended GPU memory</p> <code>minimum_gpu_ram</code> <p>Optional-integer Minimum required GPU memory</p> <code>recommended_ram</code> <p>Optional-integer Recommended Memory</p> <code>minimum_ram</code> <p>Optional-integer Minimum required memory</p> <code>recommended_cpus</code> <p>Optional-integer Recommended number of CPU cores</p> <code>minimum_cpus</code> <p>Optional-integer Minimum required number of CPU cores</p> <code>required_disk_space</code> <p>Optional-integer Required amount of disk space in GB</p>"},{"location":"examples/","title":"DIGITbrain Metadata Examples","text":"<p>Here, prospective users of the DIGITbrain platform can see complete examples of metadata specifying various different applications that have already been deployed in DIGITbrain. Please access the sidebar menu to see the currently available examples.</p>"},{"location":"examples/Cosimulation/","title":"CoSimulation","text":""},{"location":"examples/Cosimulation/#microservice","title":"Microservice","text":"Concept Key Subkey Values Administrative Data ID \"MSID_MAESTRO\" AUTHOR PROVIDER DATE Description name \"Co-simulation\" version \"2.2.0\" description \"Maestro microservice for co-simulation use cases\" classificationSchema \"Co-simulation\" type [\"Co-simulation\",  \"Maestro\"] Service deploymentFormat \"docker-compose\" deploymentData configurationData mountedSharedDirectories \"/model and /output are mounted to the host\" Hardware Requirements recommendedNumberOfGPUs recommendedGPURAM gpuType hpcRequired edgeType recommendedRAM recommendedCPUs requiredDiskSpace OS Requirements osArch \"x86_64\" osType Data Resources dataResource Model model_types [\"Co-simulation\"] model_recommendedAuthTools [\"INTO-CPS\",\" Modelica\", \"SysML\"] Parameters parameters Metrics metrics"},{"location":"examples/Cosimulation/#algorithm","title":"Algorithm","text":"Concept Key Subkey Values Administrative Data ID \"ALGID_MAESTRO\" AUTHOR PROVIDER DATE Description name \"Co-simulation Algorithm\" description \"Co-simulation experiments\" classificationSchema \"Co-Simulation\" type [\"Co-Simulation\"] version \"1.0\" Algorithm listOfMicroservices [\"MSID_MAESTRO\"] deploymentMapping"},{"location":"examples/Cosimulation/#model","title":"Model","text":"Concept Key Subkey Values Administrative Data ID \"MODID_MAESTRO\" AUTHOR PROVIDER DATE Description Name \"Mass-string-dampner\" Version \"1.0\" License Provider_contacts Marketplace_description AuthTool Type Fidelity REPOSITORY_URI \"https://github.com/prasadtalasila/digitbrain-example/raw/main/example1/model/cosim-model.zip\" PATH \"https://github.com/prasadtalasila/digitbrain-example/raw/main/example1/model/\" FILENAME \"cosim-model.zip\" State_depend Parameters inSlots outSlots OS Requirements osArch osType osDistribution Hardware Requirements recommendedNumberOfGPUCores minimumNumberOfGPUCores recommendedGPURAM minimumGPURAM recommendedRAM minimumRAM recommendedCPUs minimumCPUs requiredDiskSpace"},{"location":"examples/Cosimulation/#data","title":"Data","text":"Concept Key Subkey Values Administrative Data ID \"DATAID_OUT\" AUTHOR PROVIDER DATE Description DATA_NAME \"output\" DATA_VERSION DATA_DESC DATA_DESC_URL DATA_SIZE Search support DATA_TAGS Datakind specification DATA_KIND \"FILE\" DATA_DIRECTION \"SINK\" DATA_FORMAT [\"text/plain\"] DATA_STORE_TYPE \"LOCAL\" Data access specification DATA_URI DATA_AUTH Open parameters DATA_CREDENTIALS Further access clauses (extensible) DATA_AUX_INFO Data content semantics DATA_SCHEMA DATA_SCHEMA_URL"},{"location":"examples/Cosimulation/#ma-pair","title":"MA Pair","text":"Concept Key Subkey Values Administrative Data ID \"MAID_MAESTRO\" AUTHOR PROVIDER DATE Definition Version \"1.0.0\" Licensor Derivation Name \"Maestro-spring-dampner\" Scope \"Mass Spring Dampner model to be evaluated by co-simulation algorithm\" IP Family \"IP_Familiy_ID\" Namespace M Asset \"MODID_MAESTRO\" A Asset \"ALGID_MAESTRO\" Rules Frequency Payload"},{"location":"examples/Cosimulation/#dma-tuple","title":"DMA Tuple","text":"Concept Key Subkey Values Administrative Data ID \"DMAID_MAESTRO\" AUTHOR PROVIDER DATE Definition Version \"1.0.0\" Licensor Derivation Name \"Mass Spring Dampner\" Scope \"Mass Spring Dampner example\" IP Instance \"ID_IP_Instance\" Namespace MA Pair \"MAID_MAESTRO\" Schedule Payload Data Assets Mapping DataAssetsMapping Deployments Deployments"},{"location":"examples/Cosimulation/#supporting-metadata","title":"Supporting Metadata","text":"Concept Key Subkey Values Person ID Created at Version First name Prasad Last name Talasila Email prasad.talasila@ece.au.dk CV Image Affiliation Legal Entity (Organization) ID Created at Version Author Name AU Description Aarhus University Logo URL Location Phone VAT ID No. IP Family ID Created at Version Author Manager Name Image Model No. Description Capacity IP Man. IP Instance ID Created at Version Author Operator IP Family Name Image Serial No. Description Location"},{"location":"examples/Cosimulation/#deployment","title":"Deployment","text":"Concept Key Subkey Values Description id name author date Deployments type cloudbroker deployment_id instance_type_id key_pair_id opened_port endpoint cloud_config edge endpoint"},{"location":"examples/Cosimulation/#dataassetsmapping","title":"DataAssetsMapping","text":"Concept Key Subkey Values DataAssetsMapping MICROSERVICE_ID DATA_SOURCE_ID {      \"MICROSERVICE_ID \": {         \"DATA_SOURCE_ID \": ,         \"\": ,         \"\": , }"},{"location":"examples/Cosimulation/#configurationdata","title":"ConfigurationData","text":"Concept Key Subkey Values ConfigurationData filePath fileContent mountPropagation"},{"location":"examples/Cosimulation/#data-resources","title":"Data Resources","text":"Concept Key Subkey Values Data Resources DATA_RESOURCE_ID DATA_KIND DATA_DIRECTION DATA_FORMAT DATA_SOURCE_TYPE DATA_AUTH_TYPE DATA_SCHEMA DATA_AUX_INFO"},{"location":"examples/Cosimulation/#parameters","title":"Parameters","text":"Concept Key Subkey Values Parameters name type mandatory defaultValue description"},{"location":"examples/Cosimulation/#metrics","title":"Metrics","text":"Concept Key Subkey Values Metrics name correspondingMeasurement function unit description"},{"location":"examples/Cosimulation/#slots","title":"Slots","text":"Concept Key Subkey Values Slots Key Name Dimensions Is-continuous Units Unit Exponent Offset Scale Default-value Ranges"},{"location":"examples/DFKI/","title":"DFKI","text":""},{"location":"examples/DFKI/#microservice_flower","title":"Microservice_Flower","text":"Concept Key Subkey Values Description id \"MSID_FLOWER\" name \"Object Detection &amp; Classification Network\" author \"DFKI\" date version \"1.0.0\" description \"Detection and classification of objects from Images\" classificationSchema \"ML\" type [\"neural network\", \"deep learning\", \"convolutional neural network\", \"CNN\"] Service deploymentFormat \"docker-compose\" deploymentData configurationData mountedSharedDirectories Hardware Requirements recommendedNumberOfGPUs recommendedGPURAM gpuType hpcRequired edgeType recommendedRAM 2 recommendedCPUs 2 requiredDiskSpace 42GB OS Requirements osArch \"x86_64\" osType \"linux\" Data Resources dataResource Model model_types SavedModel (Tensorflow) model_recommendedAuthTools Tensorflow Parameters parameters Metrics metrics [, ]"},{"location":"examples/DFKI/#algorithm","title":"Algorithm","text":"Concept Key Subkey Values Description id \"ALGID_FLOWER\" name \"DFKI Object Classification Algorithm\" description \"Algorithm for ML inferences based on tensorflow\" classificationSchema \"ML\" type [\"neural network\", \"deep learning\", \"convolutional neural network\", \"CNN\"] author \"Valerie Poser\" date version \"1.0.0\" Algorithm listOfMicroservices [\"MSID_FLOWER\"] deploymentMapping"},{"location":"examples/DFKI/#model","title":"Model","text":"Concept Key Subkey Values Description ID \"MODELID_FLOWER\" Name Flower Classification Version \"1.0.0\" License Public Domain Provider DFKI Provider_contacts AuthTool Type Tensorflow Fidelity SavedModel REPOSITORY_URI \"s3://dbrain-s3-test\" PATH \"dfki/flower/model\" FILENAME \"dfki_ml_flower-inference.zip\" State_depend Parameters In-slots Outputs [detectedClass, confidenceScore] CosimSolverInfo Dependant FMUs Dependencies OS Requirements osArch osType osDistribution Hardware Requirements recommendedNumberOfGPUCores minimumNumberOfGPUCores recommendedGPURAM minimumGPURAM recommendedRAM minimumRAM recommendedCPUs minimumCPUs requiredDiskSpace Publishing Description \"Model is based on a general imagenet model (https://tfhub.dev/google/imagenet/mobilenet_v3_small_100_224/classification/5) and has been fine-tuned on flower dataset, to classifiy different flower types.\""},{"location":"examples/DFKI/#data","title":"Data","text":"Concept Key Subkey Values Administrative data ID \"DATAID_FLOWER\" AUTHOR PROVIDER DATE Description DATA_NAME \"DFKIFlowerStream\" DATA_VERSION \"1.0.0\" DATA_DESC This stream acts as a communication channel between an end user and an ML inference Algorithm DATA_DESC_URL DATA_SIZE 1m Search support DATA_TAGS [\"jpg\", \"rgb\"] Datakind specification DATA_KIND \"STREAM\" DATA_DIRECTION \"BIDIRECTIONAL\" DATA_FORMAT [\"text/plain\", \"application/octet-stream\"] DATA_STORE_TYPE \"KAFKA\" Data access specification DATA_URI \"kafka:193.225.250.14:9093:dfki-flower-in\" DATA_AUTH [\"tls_manual\"] Open parameters DATA_CREDENTIALS Further access clauses (extensible) DATA_AUX_INFO Data content semantics DATA_SCHEMA DATA_SCHEMA_URL"},{"location":"examples/DFKI/#ma-pair","title":"MA Pair","text":"Concept Key Subkey Values Definition ID \"MAID_FLOWER\" Created at Version 1.0.0 Author Licensor Derivation Name DFKI Flower Classification Scope Classification of flowers in images IP Family Namespace M Asset \"MODELID_FLOWER\" A Asset \"ALGID_FLOWER\" Rules Frequency Payload"},{"location":"examples/DFKI/#dma-tuple","title":"DMA Tuple","text":"Concept Key Subkey Values Definition ID \"DMAID_FLOWER\" Created at Version 1.0.0 Author Licensor Derivation Name Flower Classification for Valerie Scope This DMA tuple contains all assets forming a complete object detection and classification (machine learning) stack, including in- and output streams, a trained model, as well as the inference algorithm. IP Instance 123e4567-e89b-12d3-a456-426614174000 Namespace MA Pair \"MAID_FLOWER\" Schedule Payload Data Assets Mapping DataAssetsMapping Deployments Deployments"},{"location":"examples/DFKI/#deployment","title":"Deployment","text":"Concept Key Subkey Values Description id \"HOSTID_FLOWER\" name \"DFKI object detection infrastructure\" author \"Valerie Poser\" date Deployments type \"cloudbroker\" cloudbroker deployment_id instance_type_id key_pair_id opened_port endpoint cloud_config edge endpoint"},{"location":"examples/DFKI/#supporting-metadata","title":"Supporting Metadata","text":"Concept Key Subkey Values Person ID Created at Version First name Last name Email CV Image Affiliation Legal Entity (Organization) ID Created at Version Author Name Description Logo URL Location Phone VAT ID No. IP Family ID Created at Version Author Manager Name Image Model No. Description Capacity IP Man. IP Instance ID Created at Version Author Operator IP Family Name Image Serial No. Description Location"},{"location":"examples/DFKI/#dataassetsmapping","title":"DataAssetsMapping","text":"Concept Key Subkey Values DataAssetsMapping MICROSERVICE_ID \"MSID_FLOWER\" DATA_SOURCE_ID \"DATAID_FLOWER\""},{"location":"examples/DFKI/#configurationdata","title":"ConfigurationData","text":"Concept Key Subkey Values ConfigurationData filePath /data/rclone.conf fileContent [s3-server]\\n    access_key: 123abc mountPropagation Bidirectional"},{"location":"examples/DFKI/#data-resources","title":"Data Resources","text":"Concept Key Subkey Values Data Resources DATA_RESOURCE_ID kafka_stream DATA_KIND [\"STREAM\"] DATA_DIRECTION [\"BIDIRECTIONAL\"] DATA_FORMAT [\"image/jpeg\", \"text/plain\"] DATA_SOURCE_TYPE [\"KAFKA\"] DATA_AUTH_TYPE [\"tls_manual\"] DATA_SCHEMA DATA_AUX_INFO"},{"location":"examples/DFKI/#parameters","title":"Parameters","text":"Concept Key Subkey Values Parameters name \"detection_threshold\" type \"Integer\" mandatory True defaultValue 42 description \"This parameter can be used to configure the included algorithm in a certain way, possible values: 'A', 'B', 'Z'.\""},{"location":"examples/DFKI/#metrics","title":"Metrics","text":"Concept Key Subkey Values Metrics name \"detectedClass\" correspondingMeasurement \"detectedClass\" function \"ML inference\" unit \"enum\" description \"which classes has been detected in the input image\""},{"location":"examples/DFKI/#in-slots","title":"In-slots","text":"Concept Key Subkey Values In-slots Key Name Dimensions Is-continuous Units Unit Exponent Offset Scale Default-value Ranges"},{"location":"examples/DFKI/#outputs","title":"Outputs","text":"Concept Key Subkey Values Outputs Key Name Dimensions Is-continuous Units Unit Exponent Offset Scale Default-value Ranges"},{"location":"examples/Fraunhofer/","title":"Fraunhofer","text":""},{"location":"examples/Fraunhofer/#microservice_msid_ristra","title":"Microservice_MSID_RISTRA","text":"Concept Key Subkey Values Description id \"MSID_RISTRA\" name \"RISTRA CPU\" author \"Johannes Mueller-Roemer\" date version \"1.0.0\" description \"RISTRA is an efficient structural mechanics solver\" classificationSchema \"Simulation\" type [ \"Solver for Structural Analysis\",                 \"Linear Elasticity\" ] Service deploymentFormat \"docker-compose\" deploymentData configurationData mountedSharedDirectories \"/data is mounted on the host\" Hardware Requirements recommendedNumberOfGPUs recommendedGPURAM gpuType hpcRequired edgeType recommendedRAM 4 recommendedCPUs 2 requiredDiskSpace 10 OS Requirements osArch \"x86_64\" osType \"linux\" Data Resources dataResource Model model_types [\"3D FEM\"] model_recommendedAuthTools [\"PreSTRA\"] Parameters parameters Metrics metrics ["},{"location":"examples/Fraunhofer/#microservice_rclone","title":"Microservice_RClone","text":"Concept Key Subkey Values Description id \"MSID_RCLONE\" name \"RClone\" author \"Nick Craig-Wood, Ivan Andreev\" date version \"1.57.0\" description \"rclone is a service for synchronizing remote and local directories\" classificationSchema \"others\" type [ \"File transfer\" ] Service deploymentFormat \"docker-compose\" deploymentData configurationData [ mountedSharedDirectories \"/data is mounted on the host\" Hardware Requirements recommendedNumberOfGPUs recommendedGPURAM gpuType hpcRequired edgeType recommendedRAM 1 recommendedCPUs 1 requiredDiskSpace 10 OS Requirements osArch \"x86_64\" osType \"linux\" Data Resources dataResource Model model_types model_recommendedAuthTools Parameters parameters Metrics metrics"},{"location":"examples/Fraunhofer/#algorithm","title":"Algorithm","text":"Concept Key Subkey Values Description id \"ALGID_RISTRA\" name \"RISTRA_CPU\" description \"Solver for Structural Analysis - linear elasticity\" classificationSchema \"Simulation\" type [\"Solver for Structural Analysis\", \"Linear Elasticity\"] author \"Fraunhofer IGD\" date version \"1.0\" Algorithm listOfMicroservices [       \"MSID_RISTRA\",       \"MSID_RCLONE\"     ] deploymentMapping"},{"location":"examples/Fraunhofer/#model","title":"Model","text":"Concept Key Subkey Values Description ID \"MODID_RISTRA\" Name \"Engine mount\" Version \"1.0.0\" License \"Public Domain\" Provider \"Fraunhofer IGD\" Provider_contacts AuthTool \"PreSTRA\" Type \"3D FEM\" Fidelity REPOSITORY_URI \"s3://dbrain-s3-test\" PATH \"/data\" FILENAME \"engine_mount.zip\" State_depend Parameters In-slots Outputs [      CosimSolverInfo Dependant FMUs Dependencies OS Requirements osArch osType osDistribution Hardware Requirements recommendedNumberOfGPUCores minimumNumberOfGPUCores recommendedGPURAM minimumGPURAM recommendedRAM minimumRAM recommendedCPUs minimumCPUs requiredDiskSpace Publishing Description \"The Model contains a structural behavior model of an engine mount \u2026\""},{"location":"examples/Fraunhofer/#data","title":"Data","text":"Concept Key Subkey Values Administrative data ID DATAID_RISTRA AUTHOR PROVIDER DATE Description DATA_NAME DATA_VERSION DATA_DESC DATA_DESC_URL DATA_SIZE Search support DATA_TAGS Datakind specification DATA_KIND DATA_DIRECTION DATA_FORMAT DATA_STORE_TYPE Data access specification DATA_URI DATA_AUTH Open parameters DATA_CREDENTIALS Further access clauses (extensible) DATA_AUX_INFO Data content semantics DATA_SCHEMA DATA_SCHEMA_URL"},{"location":"examples/Fraunhofer/#ma-pair","title":"MA Pair","text":"Concept Key Subkey Values Definition ID \"MAID_RISTRA\" Created at Version \"1.0.0\" Author Licensor Derivation Name \"RistraEngineMount\" Scope \"Structural Simulation for Engine Mount of Fraunhofer's IP Family on moving machines\" IP Family \"IP_Familiy_ID\" Namespace M Asset \"MODID_RISTRA\" A Asset \"ALGID_RISTRA\" Rules Frequency Payload"},{"location":"examples/Fraunhofer/#dma-tuple","title":"DMA Tuple","text":"Concept Key Subkey Values Definition ID \"DMAID_RISTRA\" Created at Version Author Licensor Derivation Name \"RistraEngineMount\" Scope \"Structural Simulation for Engine Mount of Fraunhofer's IP Family on moving machines\" IP Instance \"ID_IP_Instance\" Namespace MA Pair \"MAID_RISTRA\" Schedule Payload Data Assets Mapping DataAssetsMapping Deployments Deployments"},{"location":"examples/Fraunhofer/#supporting-metadata","title":"Supporting Metadata","text":"Concept Key Subkey Values Person ID Created at Version First name Maxim Last name Redkin Email maxim.redkin@igd.fraunhofer.de CV Maxim Redkin is a scientist at Fraunhofer IGD Image maxim.redkin.png Affiliation ID of Fraunhofer.IGD Legal Entity (Organization) ID Created at Version Author ID of Fraunhofer.IGD.Maxim.Redkin Name Fraunhofer Gesellschaft f\u00fcr angewandte Forschung e.V. Description Fraunhofer is the leading organization for applied research \u2026 Logo logo.fraunhofer.png URL https://www.fraunhofer.de Location Munich Phone +49 89 \u2026 VAT ID No. 123 456 IP Family ID Created at Version Author Maxim Redkin Manager Maxim Redkin Name Fraunhofer's moving machine Image Model No. Description Capacity IP Man. IP Instance ID Created at Version Author Maxim Redkin Operator Maxim Redkin IP Family ID_Fgh_Moving_Machine Name Fraunhofer's moving machine Number 1 Image Serial No. Description Location"},{"location":"examples/Fraunhofer/#deployment","title":"Deployment","text":"Concept Key Subkey Values Description id name author date Deployments type cloudbroker deployment_id instance_type_id key_pair_id opened_port endpoint cloud_config edge endpoint"},{"location":"examples/Fraunhofer/#dataassetsmapping","title":"DataAssetsMapping","text":"Concept Key Subkey Values DataAssetsMapping MICROSERVICE_ID DATA_SOURCE_ID {      \"MICROSERVICE_ID \": {         \"DATA_SOURCE_ID \": ,         \"\": ,         \"\": , }"},{"location":"examples/Fraunhofer/#configurationdata","title":"ConfigurationData","text":"Concept Key Subkey Values ConfigurationData filePath fileContent mountPropagation"},{"location":"examples/Fraunhofer/#data-resources","title":"Data Resources","text":"Concept Key Subkey Values Data Resources DATA_RESOURCE_ID DATA_KIND DATA_DIRECTION DATA_FORMAT DATA_SOURCE_TYPE DATA_AUTH_TYPE DATA_SCHEMA DATA_AUX_INFO"},{"location":"examples/Fraunhofer/#parameters","title":"Parameters","text":"Concept Key Subkey Values Parameters name type mandatory defaultValue description"},{"location":"examples/Fraunhofer/#metrics","title":"Metrics","text":"Concept Key Subkey Values Metrics name correspondingMeasurement function unit description"},{"location":"examples/Fraunhofer/#in-slots","title":"In-slots","text":"Concept Key Subkey Values In-slots Key Name Dimensions Is-continuous Units Unit Exponent Offset Scale Default-value Ranges"},{"location":"examples/Fraunhofer/#outputs","title":"Outputs","text":"Concept Key Subkey Values Outputs Key Name Dimensions Is-continuous Units Unit Exponent Offset Scale Default-value Ranges"},{"location":"examples/ITAINNOVA/","title":"ITAINNOVA","text":""},{"location":"examples/ITAINNOVA/#microservice_caelia","title":"Microservice_CAELIA","text":"Concept Key Subkey Values Description id \"MSID_CAELIA\" name \"Sample evaluation\" author \"ITAINNOVA\" date version \"1.0.0\" description \"ROM evaluation for given input values\" classificationSchema \"Modelling\" type [ \"ROM\", \"evaluation\"] Service deploymentFormat \"docker-compose\" deploymentData configurationData mountedSharedDirectories /ROM is mounted on the host Hardware Requirements recommendedNumberOfGPUs recommendedGPURAM gpuType hpcRequired edgeType recommendedRAM 2 recommendedCPUs 1 requiredDiskSpace 0.05 OS Requirements osArch \"x86_64\" osType Data Resources dataResource Model model_types [\"ROM\"] model_recommendedAuthTools [\"Twinkle\"] Parameters parameters Metrics metrics"},{"location":"examples/ITAINNOVA/#microservice_rclone","title":"Microservice_RCLONE","text":"Concept Key Subkey Values Description id \"MSID_RCLONE\" name \"RClone\" author \"Resmi Arjun\" date version \"1.0.0\" description \"rclone is a service for synchronizing remote and local directories\" classificationSchema \"others\" type [ \"File transfer\" ] Service deploymentFormat \"docker-compose\" deploymentData configurationData [ mountedSharedDirectories /ROM is mounted on the host Hardware Requirements recommendedNumberOfGPUs recommendedGPURAM gpuType hpcRequired edgeType recommendedRAM 1 recommendedCPUs 1 requiredDiskSpace 10 OS Requirements osArch \"x86_64\" osType \"linux\" Data Resources dataResource Model model_types model_recommendedAuthTools Parameters parameters Metrics metrics"},{"location":"examples/ITAINNOVA/#algorithm","title":"Algorithm","text":"Concept Key Subkey Values Description id \"ALGID_CAELIA\" name \"Sample evaluation\" description \"ROM evaluation for given input values\" classificationSchema \"Modelling\" type [\"Injection\"] author \"ITAINNOVA\" date version \"1.0\" Algorithm listOfMicroservices [       \"MSID_CAELIA\",      \"MSID_RCLONE\"     ] deploymentMapping"},{"location":"examples/ITAINNOVA/#model","title":"Model","text":"Concept Key Subkey Values Description ID \"MODID_CAELIA\" Name \"CAELIA Injection sample case\" Version \"1.0.0\" License \"Public Domain\" Provider \"ITAINNOVA\" Provider_contacts info@itainnova.es  +34 976 010 000  C/ Mar\u00eda de Luna, n\u00ba7-8 (Pol. Actur) 50018 Zaragoza Espa\u00f1a AuthTool \"Twinkle\" Type \"Physically based simulation ROM\" Fidelity REPOSITORY_URI https://github.com/ResmiArjun/itainnova/raw/main/ROM.tgz PATH https://github.com/ResmiArjun/itainnova/raw/main/ FILENAME ROM.tgz State_depend 0 Parameters In-slots Outputs CosimSolverInfo Dependant FMUs Dependencies OS Requirements osArch osType osDistribution Hardware Requirements recommendedNumberOfGPUCores minimumNumberOfGPUCores recommendedGPURAM minimumGPURAM recommendedRAM minimumRAM recommendedCPUs minimumCPUs requiredDiskSpace Publishing Description \"CAELIA Injection sample case\""},{"location":"examples/ITAINNOVA/#data","title":"Data","text":"Concept Key Subkey Values Administrative data ID \"DATAID_INPUT\" AUTHOR PROVIDER DATE Description DATA_NAME input.csv DATA_VERSION 1.0.0 DATA_DESC This dataset represents four specific combinations of input values DATA_DESC_URL csv, txt DATA_SIZE k Search support DATA_TAGS Datakind specification DATA_KIND \"FILE\" DATA_DIRECTION \"SOURCE\" DATA_FORMAT \"text/plain\" DATA_STORE_TYPE \"LOCAL\" Data access specification DATA_URI \"https://github.com/ResmiArjun/itainnova/raw/main/input/input.csv\" DATA_AUTH \"none\" Open parameters DATA_CREDENTIALS Further access clauses (extensible) DATA_AUX_INFO Data content semantics DATA_SCHEMA DATA_SCHEMA_URL"},{"location":"examples/ITAINNOVA/#ma-pair","title":"MA Pair","text":"Concept Key Subkey Values Definition ID \"MAID_CAELIA\" Created at Version \"1.0.0\" Author Licensor Derivation Name \"ROM-Modelling\" Scope \"Physically based simulation ROM evaluation for given input values\" IP Family \"IP_Familiy_ID\" Namespace M Asset \"MODID_CAELIA\" A Asset \"ALGID_CAELIA\" Rules Frequency Payload"},{"location":"examples/ITAINNOVA/#dma-tuple","title":"DMA Tuple","text":"Concept Key Subkey Values Definition ID \"DMAID_CAELIA\" Created at Version Author Licensor Derivation Name \"ROM-Modelling hard-coded input\" Scope \"Physically based simulation ROM evaluation for given keyboard input values\" IP Instance \"ID_IP_Instance\" Namespace MA Pair \"MAID_CAELIA\" Schedule Payload Data Assets Mapping DataAssetsMapping Deployments Deployments"},{"location":"examples/ITAINNOVA/#supporting-metadata","title":"Supporting Metadata","text":"Concept Key Subkey Values Person ID Created at Version First name Valentina Last name Zambrano Email vzambrano@itainnova.es CV Valentina Zambrano is a scientist at the Aragon Institute of Technology (ITA) Image valentina.zambrano.png Affiliation ID of ITAINNOVA Legal Entity (Organization) ID Created at Version Author ID of ITAINNOVA.Valentina.Zambrano Name ITAINNOVA Description ITAINNOVA is the Aragon Institute of Technology, a non-profit center linked to the Department of Science, University and the Knowledge Society of the regional government of Aragon Logo logo.itainnova.png URL https://www.itainnova.es/tech/en/# Location Zaragoza Phone +34 976 010 000 VAT ID No. 123 456 IP Family ID Created at Version Author ITAINNOVA Manager ITAINNOVA Name ROM based DT for Injection Image Model No. Description Capacity IP Man. IP Instance ID Created at Version Author ITAINNOVA Operator ITAINNOVA IP Family ID_ITAINNOVA_CAELIA_Injection Name CAELIA Injection Image Serial No. Description Location"},{"location":"examples/ITAINNOVA/#deployment","title":"Deployment","text":"Concept Key Subkey Values Description id \"CAELIA_HOST\" name \"amazon aws\" author \"Resmi Arjun\" date Deployments type \"cloudbroker\" cloudbroker deployment_id instance_type_id key_pair_id opened_port endpoint cloud_config edge endpoint"},{"location":"examples/ITAINNOVA/#dataassetsmapping","title":"DataAssetsMapping","text":"Concept Key Subkey Values DataAssetsMapping MICROSERVICE_ID DATA_SOURCE_ID \"DATAID_INPUT\""},{"location":"examples/ITAINNOVA/#configurationdata","title":"ConfigurationData","text":"Concept Key Subkey Values ConfigurationData filePath \"./ROM/input.csv\" fileContent \"file content\" mountPropagation"},{"location":"examples/ITAINNOVA/#data-resources","title":"Data Resources","text":"Concept Key Subkey Values Data Resources DATA_RESOURCE_ID \"Input data\" DATA_KIND \"FILE\" DATA_DIRECTION \"SOURCE\" DATA_FORMAT DATA_SOURCE_TYPE DATA_AUTH_TYPE DATA_SCHEMA DATA_AUX_INFO"},{"location":"examples/ITAINNOVA/#parameters","title":"Parameters","text":"Concept Key Subkey Values Parameters name type mandatory defaultValue description"},{"location":"examples/ITAINNOVA/#metrics","title":"Metrics","text":"Concept Key Subkey Values Metrics name correspondingMeasurement function unit description"},{"location":"examples/ITAINNOVA/#in-slots","title":"In-slots","text":"Concept Key Subkey Values In-slots Key Input1 Input2 Input3 Input4 Input5 Input6 Input7 Input8 Name Injection Time Packaging Time Cooling Time Switch Packing Pressure Melting Temperature Cooling Temperature 1 Cooling Temperature 2 Dimensions 1 Is-continuous true Units Unit s s s null MPa C C C Exponent [0, 1, 0, 0, 0, 0, 0] [0, 1, 0, 0, 0, 0, 0] [0, 1, 0, 0, 0, 0, 0] [0, 0, 0, 0, 0, 0, 0] [-1, -2, 0, 0, 0, 0, 1] [0, 0, 0, 0, 1, 0, 0] [0, 0, 0, 0, 1, 0, 0] [0, 0, 0, 0, 1, 0, 0] Offset 0 0 0 0 0 273.15 273.15 273.15 Scale 1 1 1 1e6 1 1 1 1 Default-value Ranges"},{"location":"examples/ITAINNOVA/#outputs","title":"Outputs","text":"Concept Key Subkey Values Outputs Key Output1 Output2 Output3 Output4 Output5 Output6 Name Weight Shear Stress Maximum Pressure Maximum Force Filling Dimension Dimensions 1 Is-continuous true Units Unit kg MPa MPa N null mm Exponent [0, 0, 0, 0, 0, 0, 1] [-1, -2, 0, 0, 0, 0, 1] [-1, -2, 0, 0, 0, 0, 1] [1, -2, 0, 0, 0, 0, 1] [0, 0, 0, 0, 0, 0, 0] [1, 0, 0, 0, 0, 0, 0] Offset 0 Scale 1 1e6 1e6 1 1 1e-3 Default-value Ranges"},{"location":"start/","title":"Getting Started With DIGITbrain","text":"<p>Whether you want to publish a Microservice, create an Algorithm, or describe some Data, there are some simple steps to getting started with the DIGITbrain platform. The documentation for each asset describes necessary pre-requisities and more detail on required fields. See the list below:</p> <ul> <li>Microservice</li> <li>Algorithm</li> <li>Model</li> <li>Data</li> <li>Behaviour</li> <li>Process<ul> <li>Deployment</li> <li>Data Assets Mapping</li> </ul> </li> <li>Supporting Metadata</li> </ul>"},{"location":"start/algorithm/","title":"Algorithms in DIGITbrain","text":""},{"location":"start/algorithm/#introduction","title":"Introduction","text":"<p>In DIGITbrain an Algorithm is handled as a preconfigured black box software (SW) component, providing only a description of its capabilities. The DIGITbrain approach enables users with low experience to easily make use of complex algorithms by simply providing the required inputs (i.e., data, model).</p> <p>An Algorithm bundles one or more Microservice(s), that (together) enable the evaluation of a Model on Data. Within DIGITbrain, Algorithm shall be agnostic to IP instances (e.g. their application field or the context in which a model is being used). This context will be established later, when pairing the algorithm with a adequat Model as an MA-Pair, and further when providing Data to form the DMA-Tuple. The different Microservices within an Algorithm may be deployed on different resources (e.g. edge, cloud, HPC) depending on the individual mechanism of the Algorithm, and the needs of the Model.</p>"},{"location":"start/algorithm/#pre-requisites","title":"Pre-requisites","text":"<p>To integrate an Algorithm within the DIGITbrain Solution, the following steps need to be performed:</p> <ul> <li>Authoring: preparation and pre-configuration of Microservices using Authoring Tools.</li> <li>Packaging: the authored Microservice is packaged following the Asset guidelines of the DIGITbrain Solution (i.e., Docker containers).</li> <li>Publishing: definition and provision of metadata description for Microservices together with their publication in the DIGITbrain Asset Metadata Registry. Additionally, the different Microservices need to be linked to an Algorithm, defining its metadata, and publishing it as a new Algorithm Asset to the DIGITbrain Asset Metadata Registry using the respective Publishing Interface.</li> </ul>"},{"location":"start/algorithm/#describing-algorithms","title":"Describing Algorithms","text":"<p>For a closer look at the fields available for Algorithms, use the following resources:</p> <ul> <li>Algorithms in Detail for an itemised listing of fields</li> <li>Algorithms Overview for a table-formatted overview</li> </ul>"},{"location":"start/data/","title":"Data in DIGITbrain","text":""},{"location":"start/data/#introduction","title":"Introduction","text":"<p>Data sources are individual entities or assets in DIGITbrain that serve data for computations made by Algorithms  whose results are persisted in the same or another Data resource called a Data sink.</p> <p>When composing Processes, the DMA Composer chooses one or more Data resources, specifying exactly where the Algorithm should consume the data from and where to store its outputs. Such decoupling makes possible that the same Data resource can potentially be processed by different Algorithms (different analytics on  same IPI data) or the same Algorithm can be applied on a different Data resource (same analytics but on different IPI data). Note that Model that is though another parameter of DMA tuples are not considered as \"Data resource\" in this context.</p> <p>Data resources can either provide data (source), store data (sink) or enable both (bidirectional), each is of a kind: file store, database, or a stream of data - regardless of the particular implementations: Amazonon S3, Oracle MySQL, Mosquitto MQTT Broker, Apache Kafka, etc., and the corresponding type: s3, mysql, mqtt, kafka, etc. </p> <p>From location point of view, Data resources can be:</p> <ul> <li>on premise (or hosted in some private/public cloud external to compute cloud of Algorithm)</li> <li>cloud-hosted (hosted in the same compute cloud but managed independently of the Algorithm)</li> </ul> <p>To enable particular access to data for Algorithms each Data resource has an URI (Uniform Resource Identifier) associated of the form:</p> <ul> <li><code>protocol://host:port/path</code></li> </ul> <p>which specifies the protocol, host and port information, and additional details in the path part (database name, path of the file, topic name) for connection. For example, URI <code>s3://aws.amazon.com/mybucket/myfile.dat</code> specifies a Data resource providing a single file 'myfile.dat' available over S3 protocol at host aws.amazon.com in bucket 'mybucket'.</p>"},{"location":"start/data/#pre-requisites","title":"Pre-requisites","text":"<p>On-premises Data resources must be accessible for Algorithms running in a cloud, thus they must:</p> <ul> <li>be accessible over the public internet</li> <li>have public IP address or domain name</li> <li>corresponding ports open for the domain towards the compute cloud of the Algorithms</li> </ul>"},{"location":"start/data/#describing-data","title":"Describing Data","text":"<p>For a closer look at the fields available for Data, use the following resources:</p> <ul> <li>Data in Detail for an itemised listing of fields</li> <li>Data Overview for a table-formatted overview</li> </ul>"},{"location":"start/dataassetsmapping/","title":"Data Assets Mapping in DIGITbrain","text":""},{"location":"start/dataassetsmapping/#introduction","title":"Introduction","text":"<p>The Data Assets Mapping substructure in a Process will map Data assets  with Data Sources that have been specified for each Microservice that makes up an Algorithm. Data Sources describe what type/kind of data the Microservice expects (see the Input Data and Output Data fields). This Data Assets Mapping substructure will be used to connect those Data Sources to concrete Data assets.</p>"},{"location":"start/dataassetsmapping/#pre-requisites","title":"Pre-requisites","text":"<p>Data Sources (Input Data and/or Output Data) fields should be specified on at least one of the Microservices that makes up the Algorithm in the Process. The Data Assets must already be published on the DIGITbrain platform.</p>"},{"location":"start/dataassetsmapping/#understanding-data-assets-mapping","title":"Understanding Data Assets Mapping","text":"<p>For a closer look at Data Assets Mapping, use the following resources:</p> <ul> <li>Data Assets Mappings in Detail for an itemised listing of fields</li> </ul>"},{"location":"start/dataassetsmapping/#an-example","title":"An example","text":"<p>See the below JSON for an example of how Microservice, Data and DataAssetsMapping work together.</p> MicroserviceDataDataAssetsMapping <pre><code>{\n\"Microservices\": [\n{\n\"id\": \"microservice_aaa_uuid\",\n\"deploymentData\": \"docker run -e STREAM={{ my_kafka_out.DATA_URI }} dfki/img\",\n\"outputData\": [\n{\n\"output_id\": \"my_kafka_out\",\n\"DATA_KIND\": \"stream\",\n\"DATA_SOURCE_TYPE\": \"kafka\",\n//etc...\n},\n{\n\"output_id\": \"my_file_out\",\n//etc...\n}\n],\n},\n{\n\"id\": \"microservice_bbb_uuid\",\n//etc...\n\"inputData\": [\n{\n\"input_id\": \"my_stream_in\",\n\"DATA_KIND\": \"stream\",\n\"DATA_SOURCE_TYPE\": \"kafka\",\n//etc...\n},\n],\n}\n],\n</code></pre> <pre><code>\"Data\": [\n{\n\"id\": \"data_zzz_uuid\",\n\"DATA_DESC\": \"This is some important data.\",\n\"DATA_URI\": \"kafka://host/topic#1\",\n//etc...\n},\n{\n\"id\": \"data_yyy_uuid\",\n//etc...\n}\n],\n</code></pre> <pre><code>\"Process\": {\n\"id\": \"dma_tuple_ggg_uuid\",\n\"DataAssetsMapping\": {\n\"microservice_aaa\": {\n\"my_kafka_out\": \"data_zzz_uuid\",\n\"my_file_out\": \"data_yyy_uuid\"\n}\n\"microservice_bbb_uuid\": {\n\"my_stream_in\": \"data_zzz_uuid\"\n}\n}\n//etc...\n}\n</code></pre>"},{"location":"start/deployment/","title":"Deployments in DIGITbrain","text":""},{"location":"start/deployment/#introduction","title":"Introduction","text":"<p>A deployment in DIGITbrain specifies the infrastructure that a desired DMA Tuple will be deployed across. Here it is necessary to provide details on the type of infrastructure that this deployment will define, along with all the configuration details required by that infrastructure type.</p>"},{"location":"start/deployment/#pre-requisites","title":"Pre-requisites","text":"<p>For most Processes in DIGITbrain, a common set of Deployments will be suitable. Required IDs that describe that common set are available in the documentation that follows below.</p> <p>For some workloads with very specific hardware or software requirements, or for those who require direct access to underlying virtual machines, it may be necessary to raise a ticket with the administrator of your CloudBroker Platform.</p> <p>Where bring-your-own edges are used, DIGITbrain currently supports the following</p> <ul> <li>ARM or x86 Architectures</li> <li>Common Linux Distributions</li> <li>Minimum 1 CPU, 1GB RAM and 5GB free disk space</li> </ul>"},{"location":"start/deployment/#describing-deployments","title":"Describing Deployments","text":"<p>For a closer look at the fields available for Deployments, use the following resources:</p> <ul> <li>Deployments in Detail for an itemised listing of fields</li> </ul>"},{"location":"start/dma_tuple/","title":"Data-Model-Algorithm Tuples in DIGITbrain","text":""},{"location":"start/dma_tuple/#introduction","title":"Introduction","text":"<p>A Process (i.e. Data-Model-Algorithm Tuple) is built by connecting one behaviour of an IP Instance represented by a Behaviour of the corresponding IP Family with Data resources (zero or more) associated to the same IP Instance as illustrated in the following figure. Multiple active Processes associated to a given IP Instance represent a valid Digital Twin for a specific point in time. Processes associated to a Digital Twin can be activated or deactivated according to the needs of the IP Instance, facilitating the flexible reconfiguration of Digital Twins without the needs for creating dedicated Digital Twins. Such a flexible reconfiguration allows for the on-demand customisation of Digital Twins and IP Instances to adapt to changing conditions within the production site.</p> <p></p>"},{"location":"start/dma_tuple/#pre-requisites","title":"Pre-requisites","text":"<p>The IP Instance (i.e. Industrial-Product Instance), the Behaviour (i.e. Model-Algorithm Pair), and the Data Asset to be referenced by the Process would need to be published beforehand, in order to facilitate the creation and publishing of the Process.</p>"},{"location":"start/dma_tuple/#metadata-describing-processes","title":"Metadata describing Processes","text":"<p>For a closer look at this metadata, use the following resources:</p> <ul> <li>Attribute Listing for an itemised listing of fields</li> <li>Metadata Table for a table-formatted overview</li> <li>Feel free to extend this list as desired</li> </ul>"},{"location":"start/dma_tuple/#further-reading","title":"Further reading...","text":"<p>The following figure shows how the elements that constitute a Process (i.e. Microservices, Algorithms, Models, Behaviours, Data) of a Digital Twin in the DIGITbrain Solution are hierarchically structured; a higher hierarchy indicates more specialisation and more relation to the manufacturing process where the Digital Twin is used. The following figure also illustrates how the collective intelligence within the DIGITbrain Solution is exploited. On the one side, a software developer might have no notion of a given manufacturing process where the developed Microservice could be used; nevertheless, by leveraging the know-how of additional experts, Processes can be configured for Digital Twins with the developed Microservice, unlocking its full benefits. On the other side, a production manager might have no deep understanding of a given microservice; however, the involvement of other experts facilitates its utilisation within the context of a Process without the need for a dedicated training or detailed know-how about the Microservice itself.</p> <p></p> <p>This hierarchical abstraction largely contributes to one of the main technical objectives of the DIGITbrain Solution and the Digital Product Brain: to democratise the adoption of Digital Twins in the manufacturing industry (especially for SMEs). To this end, the Digital Product Brain is built upon core principles such as: - reusability: lower Db Assets are individually reused in higher Db Assets and the Process as many times as appropriate; -   versatility: Db Assets are published with customised metadata, covering more use cases and scenarios; -   sovereignty: Db Assets only store references to the actual assets (governed by the owners) and Processes are stored in dedicated storage (governed by the IPI owner); -   modularity: Processes are composed by interchangeable Db Assets, which are selected depending on the targeted properties (e.g. price, performance, accuracy); -   simplicity: every Db Asset Provider uses a dedicated web form (of the Db Publishing Interface) for publishing the Db Asset, only focusing on the essential metadata; and -   homogeneity: Db Assets and Processes are interfaced in the same manner regardless of their nature but without limiting their individual capabilities.</p> <p>The following figure generally illustrates the process flow involved in the development and publishing of a Db Asset, as well as the composition, the deployment, and the evaluation of a Process. The following figure also highlights that a Process is composed, deployed, and evaluated by a manufacturing end user with the proper access to the IP Instance to be associated with the Process.</p> <p></p>"},{"location":"start/ma_pair/","title":"Behaviours in DIGITbrain","text":""},{"location":"start/ma_pair/#introduction","title":"Introduction","text":"<p>Behaviours (Model-Algorithm Pairs) are each composed of one Model and one Algorithms to describe a certain behaviour of an IP Family. An Behaviour corresponds to one behaviour of the respective IP Family \u2013 it can serve more than one purpose.</p> <p>This asset includes the references to already published Model (\u201cM Asset\u201d) and Algorithm (\u201cA Asset\u201d) within the Db Asset Metadata Registry. The configurable information related to the \u201cRules\u201d (to determine when to trigger an action), \u201cFrequency\u201d (to determine how often an evaluation should be triggered), and \u201cPayload\u201d (to include any additional information that has not been homogenised nor standardised).</p> <p>The processes of publishing a Behaviour relies on previously published and reused Db Assets (e.g. Microservices, Algorithms, Models, IP Families) as illustrated in the following figure.</p> <p></p>"},{"location":"start/ma_pair/#pre-requisites","title":"Pre-requisites","text":"<p>The IP Family (i.e. Industrial-Product Family), the Model Asset, and the Algorithm Asset to be referenced by the Behaviour would need to be published beforehand, in order to facilitate the creation and publishing of the Behaviour.</p>"},{"location":"start/ma_pair/#describing-behaviours","title":"Describing Behaviours","text":"<p>For a closer look at the fields available for Behaviours, use the following resources:</p> <ul> <li>Behaviours in Detail for an itemised listing of fields</li> <li>Behaviours Overview for a table-formatted overview</li> </ul>"},{"location":"start/ma_pair/#further-reading","title":"Further reading...","text":"<p>The following figure shows how the elements that constitute a Process (i.e. Microservices, Algorithms, Models, Behaviours, Data) of a Digital Twin in the DIGITbrain Solution are hierarchically structured; a higher hierarchy indicates more specialisation and more relation to the manufacturing process where the Digital Twin is used. The following figure also illustrates how the collective intelligence within the DIGITbrain Solution is exploited. On the one side, a software developer might have no notion of a given manufacturing process where the developed Microservice could be used; nevertheless, by leveraging the know-how of additional experts, Processes can be configured for Digital Twins with the developed Microservice, unlocking its full benefits. On the other side, a production manager might have no deep understanding of a given microservice; however, the involvement of other experts facilitates its utilisation within the context of a Process without the need for a dedicated training or detailed know-how about the Microservice itself.</p> <p></p> <p>This hierarchical abstraction largely contributes to one of the main technical objectives of the DIGITbrain Solution and the Digital Product Brain: to democratise the adoption of Digital Twins in the manufacturing industry (especially for SMEs). To this end, the Digital Product Brain is built upon core principles such as: - reusability: lower Db Assets are individually reused in higher Db Assets and the Process as many times as appropriate; -   versatility: Db Assets are published with customised metadata, covering more use cases and scenarios; -   sovereignty: Db Assets only store references to the actual assets (governed by the owners) and Processes are stored in dedicated storage (governed by the IPI owner); -   modularity: Processes are composed by interchangeable Db Assets, which are selected depending on the targeted properties (e.g. price, performance, accuracy); -   simplicity: every Db Asset Provider uses a dedicated web form (of the Db Publishing Interface) for publishing the Db Asset, only focusing on the essential metadata; and -   homogeneity: Db Assets and Processes are interfaced in the same manner regardless of their nature but without limiting their individual capabilities.</p> <p>The following figure generally illustrates the process flow involved in the development and publishing of a Db Asset, as well as the composition, the deployment, and the evaluation of a Process. The following figure also highlights that a Behaviour is developed and published by a domain expert with the propser knowledge to describe the behavior presented by the Behaviour.</p> <p></p>"},{"location":"start/microservice/","title":"Microservices in DIGITbrain","text":""},{"location":"start/microservice/#introduction","title":"Introduction","text":"<p>Microservices are the smallest building-block in DIGITbrain. They are containerised applications that provide some required functionality. Microservices can be composed together to create an Algorithm, which uses the functionality of potentially multiple Microservices to realise some goal.</p>"},{"location":"start/microservice/#pre-requisites","title":"Pre-requisites","text":"<p>Microservices in DIGITbrain must be containerised in an OCI-compliant image format. The most common format for this is Docker but other formats are also suitable.</p> <p>Once built, your container must be pushed to a Container Registry. DockerHub offers free public and paid private repositories, or the DIGITbrain platform itself offers private repositories on a private registry. Contact an administrator for access to the DIGITbrain private registry.</p>"},{"location":"start/microservice/#describing-microservices","title":"Describing Microservices","text":"<p>For a closer look at the fields available for Microservices, use the following resources:</p> <ul> <li>Microservices in Detail for an itemised listing of fields</li> <li>Microservices Overview for a table-formatted overview</li> </ul>"},{"location":"start/model/","title":"Models in DIGITbrain","text":""},{"location":"start/model/#introduction","title":"Introduction","text":"<p>A model in DIGITbrain is an asset that contains the knowledge related to a specific industrial product instance (i.e., a concrete manufacturing machine or production line), which can hence describe and forecast the behavior of such an instance when specific operating conditions are given (n.b., the process of forecasting a system\u2019s behavior according to specific operating conditions is also known as model evaluation).</p>"},{"location":"start/model/#pre-requisites","title":"Pre-requisites","text":"<p>Models must be accessible from Algorithms for evaluation, thus they must be located in the specific DIGITbrain Model repository.</p>"},{"location":"start/model/#describing-models","title":"Describing Models","text":"<p>For a closer look at the fields available for Models, use the following resources:</p> <ul> <li>Models in Detail for an itemised listing of fields</li> <li>Models Overview for a table-formatted overview</li> </ul>"},{"location":"start/model/#further-reading","title":"Further reading...","text":"<p>This section takes an in-depth look at some of the Parameters fields required to describe this asset:</p> <p><code>In-slots</code> and <code>Outputs</code></p> <p>These fields have the same structure, detailed below. They include, as an array of objects, all inputs and parameters (In-slots) or Outputs to be defined for the Model to be evaluated, such as:</p> <ul> <li><code>Key</code> This field is of the type of group.key, e.g., type.name of each variable</li> <li><code>Name</code> This is a human-readable name of the variable</li> <li><code>Dimensions</code> This field describes the number of dimensions of the variable to treat it as a scalar, a vector field, etc.</li> <li><code>Is-continuous</code> This field describes whether the variable is continuous or discrete</li> <li><code>Units</code> This field contains several subkeys, as it follows</li> <li><code>Unit</code> This field indicates the unit of measurement of the variable (e.g., s, Pa, m/s, etc.)</li> <li><code>Exponents</code> This field contains an array of numbers defining exponents for the 7 base SI units, i.e., Length - meter (m), Time - second (s), Amount of substance - mole (mole), Electric current - ampere (A), Temperature - Kelvin (K), Luminous intensity - candela (cd), Mass - kilogram (kg). For example the derived   For example N would be represented by the array {1, -2, 0, 0, 0, 0, 1}</li> <li><code>Offset</code> This field contains the offset scale, if needed (e.g., K to \u00baC conversion)</li> <li><code>Scale</code> This field describes the order of magnitude of the measurement unit scale, e.g., 10^-3 for values expressed mm         </li> <li><code>Default-value</code> This field contains the default value for variable</li> <li> <p><code>Ranges</code> This field is an array containing both max and min values of the variable</p> In-slots <pre><code>Key:\nName:\nDimensions:\nIs-continuous:\nUnits:\nUnit:\nExponents:\nOffset:\nScale:\nDefault-value:\nRanges:\n</code></pre> Outputs <pre><code>Key:\nName:\nDimensions:\nIs-continuous:\nUnits:\nUnit:\nExponents:\nOffset:\nScale:\nDefault-value:\nRanges:\n</code></pre> </li> </ul> <code>CosimSolverInfo</code> <p>Optional: This object is made up of several fields that are optional and only needed in case of co-simulation <code>Type</code> (Description field) only. The additional fields needed in co-simulation are: * <code>Dependant FMUs</code> Contains a field with an array of URI for dependant FMU localisation * <code>OS Requirements</code> Contains a set of fields defining OS requirements for co-simulation * <code>Hardware Requirements</code> Contains a set of fields defining Hardware requirements for co-simulation</p> Dependant FMUs <pre><code>Dependencies:\n</code></pre> OS Requirements <pre><code>Key:\nosArch:\nosType: osDistribution:\n</code></pre> Hardware Requirements <pre><code>recommendedNumberOfGPUCores:\nminimumNumberOfGPUCores:\nrecommendedGPURAM:\nminimumGPURAM:\nrecommendedRAM:\nminimumRAM:\nrecommendedCPUs:\nminimumCPUs:\nrequiredDiskSpace:\n</code></pre>"},{"location":"start/supporting_metadata/","title":"Supporting Metadata in DIGITbrain","text":""},{"location":"start/supporting_metadata/#introduction","title":"Introduction","text":"<p>Here is an introduction to Supporting Metadata.</p>"},{"location":"start/supporting_metadata/#pre-requisites","title":"Pre-requisites","text":"<p>Information on any requirements imposed on this asset.</p>"},{"location":"start/supporting_metadata/#describing-supporting-metadata","title":"Describing Supporting Metadata","text":"<p>For a closer look at Supporting Metadata, use the following resources:</p> <ul> <li>IP Families for an overview of an IP Family</li> <li>IP Instances for an overview of an IP Instance</li> </ul>"},{"location":"start/supporting_metadata/#further-reading","title":"Further reading...","text":"<p>This space is for any other required documentation on this asset.</p>"},{"location":"tables/","title":"DIGITbrain Assets (Overview)","text":"<p>Here you can find a tabular overview of the very latest specification for each of the DIGITbrain assets, generated directly from the Asset Metadata Registry!</p> <p>For full detail, most users will prefer the detailed view.</p> <ul> <li>Microservice</li> <li>Algorithm</li> <li>Model</li> <li>Data</li> <li>Behaviour</li> <li>Supporting Metadata<ul> <li>IP Family</li> <li>IP Instance</li> </ul> </li> </ul>"},{"location":"tables/algorithm/","title":"Algorithm","text":"<p>This page has been auto-generated based on an OpenAPI Specification Most users will prefer this view which may include examples and additional info</p> NameTypeDetails name string character varying description: a human-readable name\u00a0to ease identification and\u00a0discoverability\u00a0for human users  description string character varying description: a short, human-readable\u00a0description of the Algorithm\u00a0to aid a human user in analysing the Algorithm\u2019s capabilities and\u00a0its applicability to a certain problem  classification_schema string public.classification_schema enum: ['Simulation', 'ML', 'others']description: the classification of the Algorithm, to describe the specialization area  type string ARRAY description: a detailed list of attributes to describe the Algorithm\u2019s field of application  version string character varying description: the version, as defined by the provider  list_of_microservices string ARRAY description: a list of Microservice Asset IDs, which are contained in the algorithm  deployment_mapping string json description: a mapping specifying which microservice should run on which host. By default each microservice is assigned a respective host, but this behaviour is not always ideal (eg. when two or more Microservices may need to run on the same host)"},{"location":"tables/data/","title":"Data","text":"<p>This page has been auto-generated based on an OpenAPI Specification Most users will prefer this view which may include examples and additional info</p> NameTypeDetails name string character varying description: Name of the data resource.  version string character varying description: Version of the data resource (not of the metadata), defined by the provider in the format of his/her choice (typically: major.minor.patch)  description string character varying description: Human readable description of the data resource characteristics, contents.  description_url string character varying description: More detailed specification of data source characteristics (doc, pdf, \u2026)  size integer integer description: Estimated/exact size of data (e.g. file size, volume size, or message size); might be used to assess HW requirements (RAM, CPU). In bytes.  tags string ARRAY description: A list of tags freely added to help in searching/indexing (not limited to a basic set of tags, keywords)  kind string public.kind enum: ['FILE', 'DATABASE', 'STREAM']description: Main category of the data resource (e.g. file/object storage, database management system, streaming broker). FILE can mean a single file or a folder.  direction string public.direction enum: ['SOURCE', 'SINK', 'BIDIRECTIONAL']description: Direction of data flow (source: data provider, sink: data consumer/storage)  format string ARRAY description: Format/encoding of the data produced or consumed by the data resource as a MIME type (IETF RFC 6838 https://www.sitepoint.com/mime-types-complete-list/). More than one can appear here (remote directory with several files).  type string character varying description: The exact type of the data resource. Typically (but not always) corresponds to the scheme part (scheme://) of URI. E.g.: mysql, mqtt.  uri string character varying description: Accessibility of the data resource, including host, port information, protocol, and other fields (path is protocol dependent, can be a topic name). GUI may show host, port, path separately. Hidden at search. Format: scheme://host:port/path.  Pseudo vars: SCHEME, HOST, PORT, PATH, QUERY, FRAGMENT.  auth_type string ARRAY description: One or more authentication types that can be accepted by the storage resource.  credentials string character varying description: Credentials (e.g. string/json, zip, config file). Its content (structure) depends on authentication type (e.g. token, username and password). OPEN means must not be filled here, but asked from user on startup.  aux_info string json description: List of key-value pais (JSON object/YAML dictionary) for additional specification of the data resource. New keys can be added on demand, a list of known keys is available.  schema string character varying description: Describes message internal structure, semantics, ontology. It can be any file (doc, rdf, owl, etc.). Asset Administration Shell, IEC 61360 - Common Data Dictionary, ...  schema_url string character varying description: URL to schema specification document (in some format, rdf, owl, xsd, \u2026)"},{"location":"tables/ip_family/","title":"IP Family","text":"<p>This page has been auto-generated based on an OpenAPI Specification</p> NameTypeDetails created_at string date description: Date of creation  version integer integer description: Version number of the IP Family  manager string uuid description: Identifier of the Legal Entity managing the IP Family  name string character varying description: Technical Name of the IP Family  image string character varying description: Picture of the IP Family  model_no string character varying description: Number defined by the IP Man.  description string character varying description: Description of the IP Family  capacity string character varying description: Capacity of the IP Family  ip_man string uuid description: Identifier of the IP Manufacturer (Legal Entity)"},{"location":"tables/ip_instance/","title":"IP Instance","text":"<p>This page has been auto-generated based on an OpenAPI Specification</p> NameTypeDetails created_at string date description: Date of creation  version integer integer description: Version number of the IP Instance  operator string uuid description: Identifier of the Legal Entity operating the IP Instance  ip_family string uuid description: Reference to the IP Family  name string character varying description: Name of the IP Instance  image string character varying description: Picture of the IP Instance  serial_no string character varying description: Number defined by the IP Man.  description string character varying description: Description of the IP Instance  location string character varying description: Physical location of the IP Instance"},{"location":"tables/ma_pair/","title":"Behaviour (M+A Pair)","text":"<p>This page has been auto-generated based on an OpenAPI Specification Most users will prefer this view which may include examples and additional info</p> NameTypeDetails version string character varying description: Version number of the MA Pair, defined by the provider  derivation string uuid description: In case of derivation, references to parent / child (optional)  name string character varying description: Short name to identify the MA Pair  description string character varying description: Short description of the scope of the MA Pair (human readable)  ip_family string uuid description: Identifier of the IP Family the MA Pair is valid for  namespace string uuid description: Context to interpret the associated information (optional?)  m_asset string uuid description: Identifier of the Model Asset associated to the MA Pair (NB: The corresponding model file is indicated in Model metadata (first tab) as Model_URI and the corresponding zip file needs to be served to the Algorithm to evaluate the Model by the Microservice (MODEL_FILENAME))  Note: This is a Foreign Key to `model.id`. a_asset string uuid description: Identifiers of the Algorithm Asset associated to the MA Pair   Note: This is a Foreign Key to `algorithm.id`. rules string ARRAY description: References to recommended Rules to be verified per Evaluation of the MA Pair  frequency integer integer description: Recommended number of evaluations conducted per hour for the MA Pair (optional)  payload string json description: User-defined key-value pairs: JSON string with additional information (optional)"},{"location":"tables/microservice/","title":"Microservice","text":"<p>This page has been auto-generated based on an OpenAPI Specification Most users will prefer this view which may include examples and additional info</p> NameTypeDetails name string character varying description: human readable short, yet descriptive name of the Microservice. version string character varying description: version as defined by the user. description string character varying description: human readable short description of the Microservice's capabilities. classification_schema string public.classification_schema enum: ['Simulation', 'ML', 'others']description: fine-granular classification of the Microservice type string ARRAY description: detailed type of the microservice, list of keywords deployment_format string public.deployment_format enum: ['docker-compose', 'kubernetes-manifest']description: identifier of the deployment environment required to deploy the Microservice's container deployment_data string json description: JSON of docker-compose or kubernetes manifest required to run the container configuration_data string ARRAY description: List of objects specifying configuration file(s) content required by the service mounted_shared_directories string character varying description: A note for developers of co-operating Microservices. Directories that should be shared to the host where this microservice can find required inputs / store outputs recommended_number_of_gpus integer integer description: recommended number of GPUs recommended_gpu_ram integer integer description: recommended amount of GPU memory in GB gpu_type string character varying description: a description of the type of GPUs, and further specifications, to allow the execution of the Microservice  hpc_required boolean boolean description: whether this Microservice requires an HPC environment to be executed efficiently  edge_type string public.edge_type enum: ['TPU (Google)', 'NPU (Qualcomm)', 'FPGA', 'NVIDIA Jetson AGX']description: required type of edge device to allow the execution of the Microservice  recommended_ram integer integer description: recommended amount of memory in GB  recommended_cpus integer integer description: recommended number of CPU cores  required_disk_space integer integer description: required amount of disk space in GB  os_arch string character varying description: supported os architecture. Defaults to x86  os_type string character varying description: supported os type. Defaults to Linux  data_resource string ARRAY description: list of Data objects for each required data resource, specified using the \"DATA\" fields in the linked substructure  model_types string ARRAY description: list of supported Model types  model_recommended_auth_tools string ARRAY description: list of recommended AuthoringTools used to generate the Model  parameters string ARRAY description: list of Parameter objects for each possible parameters, to be specified before deployment  metrics string ARRAY description: list of Metric objects for each metric collected by the Microservice  is_gui boolean boolean description: (boolean) indicates that this microservice exposes a graphical user interface (web). Defaults to False.  workload_type string public.workload_type enum: ['service', 'job', 'undefined']description: (enum[\"service\", \"job\", \"undefined\"]) specifies the workload type. service for long running microservices that must be shut-down by the user. job for batch operations that should shut-down after microservice completes succesfully. undefined for other, that must be shut-down by the user. Defaults to undefined."},{"location":"tables/model/","title":"Model","text":"<p>This page has been auto-generated based on an OpenAPI Specification Most users will prefer this view which may include examples and additional info</p> NameTypeDetails name string character varying description: Name of the model  version string character varying description: Version of the model, defined by the provider.   license string character varying description: License of the model.  Type tbd in SAD group  provider_contacts string character varying description: Dictionary with keys being phone, email, address - Type takes into account co-simulation models, for which solver info is mandatory (next slide)  description string character varying description: Model tag description Additional info about model files (e.g. versioning, scope, i.e. what is the model used for, e.g. simulation, control, etc.) - Human readable marketplace description  auth_tool string character varying description: Authoring Tool used to create the model  type string character varying description: ML, LCA, 3D FEM and CFD, System simulation, discrete event simulation, co-simulation (it couples a model with specific algorithms) - The original term Path was proposed to be changed (SAD)  fidelity integer integer description: Error of the model\u2019s prediction  repository_uri string character varying description: Where the model file is stored (usually the DigitBrain certified external model repository). The path and model filename are not provided via this field.  path string character varying description: Path to the model file in the specified repository, not including the filename itself.  filename string character varying description: Name of the model file at the given path within the given repo, with a file extension if it exists.  state_depend boolean boolean description: stateful -&gt; 1, stateless -&gt; 0  inslots string ARRAY description: List of objects with values on which the model is evaluated (or parameters that might set before or during the evaluation) - Inputs and parameters together, although if needed we can still differentiate them internally in key field for each specific model.  outslots string ARRAY description: List of objects with values that the model approximates  os_arch string character varying description: OS architecture type (e.g. x86_64)  os_type string character varying description: OS type (e.g. Windows, Linux)  os_distribution string character varying description: OS distributun (e.g. Ubuntu, Fedora)  recommended_number_of_gpu_cores integer integer description: Recommended number of GPU cores  minimum_number_of_gpu_cores integer integer description: Minimum required number of GPU cores  recommended_gpu_ram integer integer description: Recommended GPU memory  minimum_gpu_ram integer integer description: Minimum required GPU memory  recommended_ram integer integer description: Recommended Memory  minimum_ram integer integer description: Minimum required memory  recommended_cpus integer integer description: Recommended number of CPU cores  minimum_cpus integer integer description: Minimum required number of CPU cores  required_disk_space integer integer description: Required amount of disk space in GB"}]}